{"componentChunkName":"component---src-templates-lecture-page-template-tsx","path":"/lectures/regex-tutorial/section2/3/","result":{"data":{"markdownRemark":{"id":"fc93cf79-56d9-58a7-b0ee-51217be6f0bb","excerpt":"이번 강의에서는  캐릭터 클래스를 한번 살펴볼건데요.  캐릭터 클래스는 이전 강의에서 잠깐 언급한 적이 있었죠? 이 친구는  캐릭터 클래스를 제외한 모든 문자를 의미하는 캐릭터 클래스에요. 이  캐릭터 클래스는 우리가 일반적으로 프로그래밍 언어들에서…","html":"<p>이번 강의에서는 <code class=\"language-text\">.</code> 캐릭터 클래스를 한번 살펴볼건데요. <code class=\"language-text\">.</code> 캐릭터 클래스는 이전 강의에서 잠깐 언급한 적이 있었죠?</p>\n<p>이 친구는 <code class=\"language-text\">\\n</code> 캐릭터 클래스를 제외한 모든 문자를 의미하는 캐릭터 클래스에요. 이 <code class=\"language-text\">\\n</code> 캐릭터 클래스는 우리가 일반적으로 프로그래밍 언어들에서 개행 문자로 사용하는 녀석과 정확히 같은 의미입니다.</p>\n<p>뭐 보통은 이런 식으로 사용하죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token string\">'Hi, I am Evan.\\nNice to meet you!'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>그럼 이제 개발자 도구를 열어서 콘솔에 이 문자열을 한번 복붙해보도록 하겠습니다. </p>\n<p>(크롬에 복붙)</p>\n<p>복붙을 하고 나면 이렇게 <code class=\"language-text\">\\n</code> 이었던 부분이 개행이 된 모습을 볼 수가 있죠? 정규식에서의 <code class=\"language-text\">\\n</code>캐릭터 클래스도 이것과 정확히 같은 의미입니다. 개행이 되는 부분을 의미하는 저 이스케이프 문자를 잡아내는 거에요.</p>\n<p>그리고 <code class=\"language-text\">.</code> 캐릭터 클래스는 이 개행 문자를 제외한 나머지 문자를 의미합니다.</p>\n<p>앞선 강의에서 한번 캐릭터 클래스를 왜 사용해야하는지에 대해서 언급했던 적이 있었는데요. 개인적으로 이 캐릭터 클래스가 바로 캐릭터 클래스를 왜 사용해야하는가를 온 몸으로 보여주는 녀석이라고 생각합니다.</p>\n<p>이 캐릭터 클래스는 말 그대로 개행 문자를 제외한 모든 문자를 의미하는 녀석인데, 이걸 캐릭터 클래스 없이 내가 직접 손수 한땀한땀 정규식을 만들어본다고 한번 생각해보세요…? 상상만 해도 정말 끔찍하죠?</p>\n<p>아마 밤을 새도 정규식 작성을 끝내지 못할거고 여러분의 손목과 눈과 허리는 이 세상에 존재하는 모든 문자를 입력하느라 이미 옛날 옛적에 부서졌겠죠?</p>\n<p>하지만 이 <code class=\"language-text\">.</code> 캐릭터 클래스가 여러분의 손목과 눈과 허리를 지켜주는 역할을 하는 거에요.</p>\n<p>한번 간단하게 예시를 볼게요. 이런 문자열이 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token string\">'ABC123!@#'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>여기서 만약 우리가 “어떤 글자이든 상관없는데 4개 씩만 추리고 싶다”라고 하면 어떻게 하면 될까요?</p>\n<p>그냥 이렇게 <code class=\"language-text\">.</code> 캐릭터 클래스를 4번 써주면 됩니다. 심플하죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token string\">'ABC123!@#'</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/..../g</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"ABC1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"23!@\"</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>이 정규식 뒤에 지금 <code class=\"language-text\">g</code>라는 플래그가 하나 붙어있는데, 이건 나중에 다시 설명하겠지만 이 대상이 되는 문자열 안에서 이 정규식과 매칭이 되는 부분을 “모두 찾아라” 라는 의미에요.</p>\n<p>이게 없으면 하나만 찾고 정규식이 끝나버립니다. 이 플래그에 대한 내용은 나중에 플래그를 설명할 때 다시 자세히 말씀을 드릴 예정이니까 지금은 그냥 저 플래그의 의미보다는 “그냥 <code class=\"language-text\">g</code>를 붙혀야 패턴 매칭이 되는 모든 부분을 찾을 수 있구나” 정도만 생각하고 넘어가면 될 것 같아요.</p>\n<p>지금은 플래그보다 이 <code class=\"language-text\">.</code> 캐릭터 클래스가 개행 문자를 제외한 모든 문자를 의미하는 녀석이라는 것에만 집중해주세요.</p>\n<p>다시 캐릭터 클래스로 돌아와서, 결국 이 정규식에서 <code class=\"language-text\">....</code> 이 의미하는 것은 아무 글자나 그냥 4번 연속으로 등장하는 패턴을 의미하는 거에요.</p>\n<p>그래서 지금 매칭된 부분들 보면 4개씩 묶여있는 모습을 볼 수가 있죠? 왜냐하면 <code class=\"language-text\">ABC1</code>까지가 한번 이 정규식이 의미하는 패턴을 만족하는 부분이고, 또 다음에 이어지는 <code class=\"language-text\">23!@</code> 까지가 또 이 패턴을 만족하는 부분이기 때문에 묶여있는거에요.</p>\n<p>맨 뒤에 있는 #은 더 이상 이 패턴을 만족할 수가 없죠? 뒤에 더 글자가 없잖아요?</p>\n<p>제가 만약 이 정규식을 <code class=\"language-text\">....</code> 즉, 닷 4개가 아니라 닷 3개로 바꾸면 어떻게 될까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token string\">'ABC123!@#'</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/.../g</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"ABC\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"!@#\"</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>이렇게 3개씩 묶이게 되겠죠? 그리고 이 <code class=\"language-text\">.</code> 캐릭터 클래스는 개행문자를 제외한 모든 문자를 의미하기 때문에 문자열이 바뀌어도 그냥 여기저기 다 쓸 수 있어요.</p>\n<p>자, 그러면 모든 문자를 의미하는 캐릭터클래스인 <code class=\"language-text\">.</code> 이 아니라 진짜 그냥 <code class=\"language-text\">.</code> 이라는 문자 자체를 찾고 싶으면 어떻게 해야할까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/\\./</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>요렇게 앞쪽에 역슬래시를 사용해서 이스케이핑을 해주시면 됩니다. 이게 이후 나오는 다른 캐릭터 클래스들과 다른 점인데, 다른 캐릭터 클래스들은 역슬래시를 사용하면 “이게 그냥 문자가 아니라 캐릭터 클래스다”라는 의미거든요?</p>\n<p>근데 이 녀석만 반대에요. 다른 녀석들은 그냥 뭐 <code class=\"language-text\">d</code>라고 쓰면 그냥 <code class=\"language-text\">d</code>라는 문자 자체를 의미하는 거고 <code class=\"language-text\">\\d</code>를 쓰면 숫자 집합을 의미하는 캐릭터 클래스거든요? 근데 이 녀석은 그냥 <code class=\"language-text\">.</code>을 쓰면 모든 문자를 의미하는 캐릭터 클래스가 되고  <code class=\"language-text\">\\.</code> 을 쓰면 <code class=\"language-text\">.</code> 이라는 문자 자체를 의미하는 게 되어요. 완전 반대죠? 이 점을 잘 기억해두셔야 합니다.</p>\n<ul>\n<li>예시 다시 생각해보기</li>\n</ul>\n<p>예를 들어, 이런 상황도 있을 수 있죠. 어떤 파일이 있는데, 이 파일이 압축되어 있는거에요. </p>\n<p>파일 파싱을 해보지 않으신 분들은 내부를 까볼 일이 없으니까 어떻게 생긴 건지 모르시는 분들도 있을 수 있는데, 사실 파일도 어떤 형식을 가진 문자열입니다.</p>\n<p>그냥 뭔가 규칙이 있는 문자열이 쭉 나열된거에요. 그래서 엄청 간단한 파일 예시를 만들어보면 이런 식입니다.</p>\n<p>(4개 씩 떼면서 아무 글자나 친다)</p>\n<p>자, 이런 느낌이에요. 사실 이 정도로 간단한 파일이 있을까 싶긴한데, 그냥 진짜 간단하게 예시를 들어보면 이런 느낌이라는 거에요.</p>\n<p>그리고 이런 파일을 압축하는 가장 간단한 방법은, 뭐 알고리즘 이런 거 다 필요없고 그냥 공백을 다 없애버리는 거에요. 이게 가능한 이유는 결국 읽는 쪽에서 이 파일이 원래 몇 글자씩 떼어서 읽는거다라는 정보만 알고 있으면 굳이 공백이 없어도 읽는데 아무 문제가 없거든요? 그냥 공백을 다시 넣으면 되잖아요?</p>\n<p>그럼 이 압축된 파일을 읽는 쪽에서는 4글자씩 잘라와서 읽어야 하잖아요? 이럴때 그냥 우리가 지금 배운 캐릭터 클래스를 이용하는 겁니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/..../g</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이렇게 하면 그냥 4글자씩 잘리잖아요? 이걸 만약에 정규식 없이 해야한다고 생각하면 이 문자열을 순회돌면서 index를 가지고 계속 4로 나눠서 나머지를 보고 어쩌고 저쩌고 하는 과정이 또 필요해요.</p>\n<p>그리고 이게 지금 regexr에서 봐서 이런 식으로 표현이 되는 건데, 원래 자바스크립트에서 <code class=\"language-text\">match</code> 메소드로 이 정규식을 문자열에 때리면 배열로 나옵니다.</p>\n<p>(개발자 도구에 직접 쳐봄)</p>\n<p>이렇게 배열로 나와요. 그러면 파일을 읽을 때 그냥 저 배열을 순회돌면서 의미를 분석하면 끝나는 거에요.</p>\n<p>물론 이건 이제 엄청하게 많은 부분들을 생략한 예시지만, 정규식을 사용하면 이렇게 생산성을 비약적으로 향상시킬 수 있어요.</p>","tableOfContents":"","fields":{"slug":"lecture.regex-tutorial.section2.3","lecture":"regex-tutorial","category":"content"},"frontmatter":{"title":"모든 문자를 매칭하는 . 캐릭터 클래스"}}},"pageContext":{"slug":"lecture.regex-tutorial.section2.3","previous":{"fields":{"slug":"lecture.regex-tutorial.section2.4","path":"/lectures/regex-tutorial/section2/4/"}},"next":{"fields":{"slug":"lecture.regex-tutorial.section2.2","path":"/lectures/regex-tutorial/section2/2/"}}}}}