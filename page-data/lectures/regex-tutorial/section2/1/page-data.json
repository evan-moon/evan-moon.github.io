{"componentChunkName":"component---src-templates-lecture-page-template-tsx","path":"/lectures/regex-tutorial/section2/1/","result":{"data":{"markdownRemark":{"id":"f99fb69f-9a3f-58eb-9ae2-35f74752d158","excerpt":"자 이번 강의에서는 정규식을 사용해서 문자열 중에 내가 원하는 문자가 존재하는지를 찾아낼 수 있는 방법에 대해서 이야기보려고 합니다. 정규식을 사용하여 내가 원하는 문자들을 찾을 수 있는 방법은 크게 두 가지가 있습니다. 어차피 이후 강의에서 이 방…","html":"<p>자 이번 강의에서는 정규식을 사용해서 문자열 중에 내가 원하는 문자가 존재하는지를 찾아낼 수 있는 방법에 대해서 이야기보려고 합니다.</p>\n<p>정규식을 사용하여 내가 원하는 문자들을 찾을 수 있는 방법은 크게 두 가지가 있습니다. 어차피 이후 강의에서 이 방법들에 대해서 다시 한번 자세히 설명을 드릴 예정이니까 지금은 그냥 편하게 제가 보여드리는 예시들을 보면서 “아 이런 기능도 있구나” 정도로만 알고 넘어가셔도 좋을 것 같아요.</p>\n<p>일단 첫 번째로는 그냥 이렇게 내가 원하는 문자열을 직접 입력하는 방법이 있구요.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/hello/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>그리고 두 번째로 캐릭터 클래스라는 특별한 녀석을 사용하는 방법도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/\\w/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>일단 내가 원하는 문자열을 직접 입력하는 방법을 보면, 꽤 직관적이에요. 그래서 이해하는 게 그렇게 어렵지 않죠.</p>\n<p>왜냐면 내가 정규식에 <code class=\"language-text\">hello</code>라는 문자열을 주면 정규식은 hello라는 문자열을 찾을 거니까요. 굉장히 직관적이죠?</p>\n<p>근데 이 방법의 문제가 뭐냐면, 내가 찾을 문자열을 명시할 수 밖에 없다는 거에요. 이게 무슨 의미냐.</p>\n<p>위 예시를 다시 보면, 만약 제가 hello라는 문자열을 찾고 싶으면 그냥 이렇게 입력하면 되죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/hello/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>근데 만약 제가 ”<code class=\"language-text\">h</code>로 시작하고 <code class=\"language-text\">o</code>로 끝나는 문자열을 찾고 싶다”라고 하면 어떻게 될까요?</p>\n<p>그런 상황에서는 이런 표현으로 절대 이 문제를 해결할 수가 없습니다.</p>\n<p>왜냐면, 결국 <code class=\"language-text\">h</code>로 시작하고 <code class=\"language-text\">o</code>로 끝나는 문자열을 찾고 싶다는 말의 의미는, 이 조건들을 제외하면 나머지는 그냥 어찌되든 상관없다는거거든요?</p>\n<p>그러니까 <code class=\"language-text\">h</code> 다음에 <code class=\"language-text\">a</code>가 오든 <code class=\"language-text\">1</code>이 오든 뭐가 오든 간에 문자열의 마지막이 <code class=\"language-text\">o</code>로 끝나기만 하면 된다는 거에요. 하지만 이 표현은 ”<code class=\"language-text\">h</code>다음에 뭐가 오든 상관없다”라는 걸 표현할 수가 없죠? 무조건 문자열 안에 어떤 문자들을 매칭할 지 하나하나 다 명시해줘야 되니까요.</p>\n<p>그래서 우리는 이런 추상적인 표현들을 하기 위해 캐릭터 클래스라는 것을 사용하는 겁니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\">\\d\n\\w\n\\s\n<span class=\"token punctuation\">.</span>\n<span class=\"token operator\">^</span>\n$\n\\b</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>캐릭터 클래스를 보면 숨겨진 의미를 가진 기호나 축약어들로 구성되어있어요. 그래서 이 캐릭터 클래스들의 의미를 제대로 알지 못하면 높은 확률로 정규식을 읽지 못할 거에요. 왜냐면 왠만한 정규식에는 이런 캐릭터 클래스가 굉장히 많이 쓰이거든요.</p>\n<p>자, 그럼 이 캐릭터 클래스라는 게 도대체 뭐냐. 결국 이 캐릭터 클래스가 의미하는 것은 정규식에서 미리 정의해놓은 문자들의 집합이에요. 자 집합이라는 말이 또 나왔죠?</p>\n<p>자 예를 들어,</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/./</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이 <code class=\"language-text\">.</code>(Dot) 라는 캐릭터 클래스가 있습니다. 이후 강의에서 다시 자세히 설명하겠지만, 이 <code class=\"language-text\">.</code> 라는 캐릭터 클래스가 의미하는 것은 <code class=\"language-text\">any</code>, 그러니까 결국 모든 문자를 의미하는 캐릭터 클래스에요.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token comment\">// 어떤 문자든 상관없는데, 그냥 문자 3개면 OK라는 의미</span>\n<span class=\"token regex\">/.../</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>아까 저희가 <code class=\"language-text\">h</code> 나  <code class=\"language-text\">o</code> 같이 원하는 문자를 명시적으로 입력했던 것과는 대조적으로 이 친구는 굉장히 추상적이죠?</p>\n<p>만약에 이 <code class=\"language-text\">.</code>과 동일한 표현을 아까 저희가 <code class=\"language-text\">hello</code> 를 정규식에 입력했던 것처럼 하나하나 원하는 문자를 입력하는 방식으로 표현하려고 한다면, 이걸 어떻게 표현할 수 있을까요?</p>\n<p>네 당연히 불가능 합니다. 컴퓨터에 등록된 모든 문자를 정규식에 일일히 다 입력할 수는 없잖아요?</p>\n<p>결국 캐릭터 클래스라는 녀석이 정규식에 차지하는 역할은 이런 거에요. 어떤 문자를 내가 명시적으로 찝지 않고 조금 더 넓은 범위의 집합으로 표현할 수 있는 겁니다.</p>\n<p>예를 들어 <code class=\"language-text\">1</code>, <code class=\"language-text\">2</code> 이런게 아니라 그냥 “숫자”라는 의미를 캐릭터 클래스를 사용해서 표현할 수 있는 겁니다.</p>\n<p>이후 강의에서 어차피 이 캐릭터 클래스들의 사용법이나 예시에 대한 이야기를 다시 할 예정이기 때문에, 일단은 캐릭터 클래스는 정규식에 미리 정의되어있는 특정한 문자열들의 집합을 의미한다는 것만 확실하게 알고 가시면 좋을 것 같습니다.</p>\n<p>다음 강의에서는 정규식에 문자를 직접 입력하거나 캐릭터 클래스를 사용해서 문자열 내에서 내가 원하는 문자를 정확히 찾을 수 있는 방법에 대한 이야기를 진행하도록 하겠습니다.</p>","tableOfContents":"","fields":{"slug":"lecture.regex-tutorial.section2.1","lecture":"regex-tutorial","category":"content"},"frontmatter":{"title":"캐릭터 클래스란 무엇인가요?"}}},"pageContext":{"slug":"lecture.regex-tutorial.section2.1","previous":{"fields":{"slug":"lecture.regex-tutorial.section2.2","path":"/lectures/regex-tutorial/section2/2/"}},"next":{"fields":{"slug":"lecture.regex-tutorial.section1","path":"/lectures/regex-tutorial/section1/"}}}}}