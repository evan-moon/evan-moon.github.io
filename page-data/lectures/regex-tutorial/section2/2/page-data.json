{"componentChunkName":"component---src-templates-lecture-page-template-tsx","path":"/lectures/regex-tutorial/section2/2/","result":{"data":{"markdownRemark":{"id":"dba55741-5045-5bc6-b3fe-d795c087d0b0","excerpt":"이번 강의에서는 정규식을 사용하여 내가 원하는 문자를 찾아내는 방법에 대해서 이야기해보려고 합니다. 이전 강의에서 이야기했듯이 정규식으로 내가 원하는 문자열을 찾는 방법은 크게 두 가지가 있습니다. 첫 번째는  이렇게 내가 원하는 문자열을 명시적으로…","html":"<p>이번 강의에서는 정규식을 사용하여 내가 원하는 문자를 찾아내는 방법에 대해서 이야기해보려고 합니다.</p>\n<p>이전 강의에서 이야기했듯이 정규식으로 내가 원하는 문자열을 찾는 방법은 크게 두 가지가 있습니다. 첫 번째는 </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/hello/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이렇게 내가 원하는 문자열을 명시적으로 정규식에 입력해서 찾아내는 방법이었죠? 이 방법은 사실 굉장히 직관적이기 때문에 따로 깊은 설명을 하지 않아도 이해가 어려우시지는 않을 거에요.</p>\n<p>자, 그러면 한번 간단한 예시를 같이 볼까요?</p>\n<p>여기 <code class=\"language-text\">hello world</code>라는 문자열이 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token string\">'hello world'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이 중에서 만약 <code class=\"language-text\">hello</code> 라는 문자열만 찾아내서 매칭하고 싶다면 어떻게 하면 될까요?</p>\n<p>이건 너무 쉽죠?</p>\n<p>그냥 이렇게 <code class=\"language-text\">hello</code>를 쓰면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/hello/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이 앞 뒤에 붙은 슬래쉬들은 자바스크립트에서 “이게 정규식이다”라는 것을 표현하는 리터럴 문법이에요. 리터럴 문법은 결국 어떤 것들을 간단하게 표현할 수 있도록 지원하는 문법이기 때문에 정규식도 원래는 이런 리터럴 문법이 아니라 </p>\n<p>이렇게</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>정규식 객체를 직접 생성하는 방법이 정석이기는 합니다. 근데 이렇게 하나 리터럴 문법으로 하나 큰 차이가 없기 때문에 굳이 이렇게 귀찮게 <code class=\"language-text\">new</code> 예약어까지 붙혀가면서 정규식 객체를 생성할 필요는 없겠죠?</p>\n<p>물론 어쩔 수 없이 리터럴 문법이 아니라 정규식 객체를 직접 생성해야하는 상황이 있긴한데, 이건 그냥 “그런 상황도 있다” 정도만 알고 넘어가셔도 지금은 딱히 문제가 없습니다.</p>\n<p>자 그럼, 다시 아까 만들었던 정규식 표현으로 돌아와 볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/hello/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이 표현은 문자열 속에서 <code class=\"language-text\">hello</code>라는 문자열을 찾아내는 정규식 표현이라고 했었죠. 그럼 제가 <code class=\"language-text\">hello w</code>까지 매칭하고 싶다면 어떻게 하면 될까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/hello w/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이렇게 하면 되겠죠? 물론 문자열 사이의 공백을 표현하는 방법은 스페이스만 있는 것이 아니기 때문에 이렇게 스페이스로 공백을 표현하는게 안전한 방법은 아닌데, 지금 이 예시에서는 공백이 스페이스라는 것이 확실하기 때문에 조금 더 여러분이 이해하기 쉽도록 스페이스를 사용해서 정규식을 작성했습니다.</p>\n<p>이렇게 문자를 정규식에 직접 사용해서 내가 원하는 문자열을 찾는 것은 그렇게 어렵지 않아요. 사실 실무에서 이렇게 단순한 정규식을 사용하는 일이 많지 않기는 한데, 이게 결국 정규식이 작동하는 방법을 알아보는 가장 단순한 방법이고 가장 직관적인 방법이기 때문에 이 부분을 확실히 짚고 넘어가고 싶었어요.</p>\n<p>하지만 지금 우리가 보고 있는 이 예시에서 중요한 것은 따로 있습니다. 바로 이 정규식이 “본질적으로 어떤 표현이냐”하는 것인데요.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/hello/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>우리가 지금까지 여러번 봤지만, 이렇게 정규식을 작성하면 문자열 내에서 <code class=\"language-text\">hello</code>라는 문자열을 찾아낼 수 있잖아요? 근데 이게 진짜 <code class=\"language-text\">hello</code>라는 걸 찾아내는 표현일까요?</p>\n<p>물론 단순히 “아, 정규식에 hello라고 입력해주면 hello를 찾는구나”라고 이해하셔도 안 될 건 없습니다. 하지만 사실 이런 프로그래미티컬리한 것들을 다룰 때는 조금 더 컴퓨터처럼 생각하는 게 좋아요.</p>\n<p>이 표현은 사실 hello를 찾는 게 아니에요. 이건 그냥 “h, e, l, l, o”가 연속으로 등장하는 문자열을 찾는 거에요.</p>\n<p>이게 그냥 “말장난아니냐” 라고 생각하실 수도 있는데, 조금 다릅니다. 왜냐면 우리는 이미 <code class=\"language-text\">hello</code>라는 단어가 가지는 의미를 잘 알고 있죠. 그래서 이런 문자열을 보면 자연스럽게 저 문자들을 묶어서 생각하게 되거든요?</p>\n<p>그런데 컴퓨터는 당연히 hello가 무슨 뜻인지 몰라요. 뭐 학습시키면 알 수도 있겠지만, 기본적으로는 컴퓨터는 아는 게 없습니다. 생각보다 멍청해요.</p>\n<p>그래서 이 표현을 우리가 볼 때는 “hello”라는 문자열을 찾는다고 생각하지만, 컴퓨터 입장에서는 그냥 h e l l o가 연속으로 등장하는 문자열을 찾는 것 뿐 입니다.</p>\n<p>이런 사고의 차이가 별 거 아닌 것 같아도, 나중에 복잡한 정규식을 보거나, 심지어는 정규식이 아니라 다른 프로그래밍 언어라던가 패러다임이라던가 이런 것들을 여러분들이 접할 때에도 이렇게 컴퓨터처럼 사고하는 연습을 많이 하시면 이런 이론이나 개념들을 익히는 데 조금 더 도움이 됩니다. 생각보다 사람이 사고하는 방식과 컴퓨터가 돌아가는 방식이 많이 달라요.</p>\n<p>결국 이 정규식 표현은 h, e, l, l, o가 연속으로 등장하는 표현을 찾는 것이라는 것을 아는 것이 이번 강의의 진짜 목적입니다.</p>\n<p>그렇기 때문에 이 정규식 표현에 다른 문자가 하나라도 끼면 </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/helloa/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이제 이 표현은 h e l l o 뒤에 a까지 등장하는 문자열을 찾는 표현이 되는 것이죠. 이렇게 되면 더 이상 “hello world” 라는 문자열에서는 h e l l o 뒤에 a까지 붙어서 등장하는 부분을 찾을수가 없게 되죠.</p>\n<p>저기 a를 붙힌다고 해서 hello를 따로 찾고 a를 따로 찾는 게 아니에요.</p>\n<p>왜냐면 컴퓨터는 멍청이라서 hello라는 의미를 모르거든요. 그냥 h e l l o a가 연속으로 등장하는 부분만 죽어라 찾는거에요. 근데 “hello world”라는 문자열 안에는 이런 부분이 전혀 없죠. 그래서 매칭 결과도 “없다”라고 나오게 되는 겁니다.</p>\n<p>이렇게 이번 강의에서는 직접 정규식에 문자를 입력해서 내가 원하는 문자열을 찾는 방법을 알아보았습니다. 이제 다음 강의에서는 이렇게 직접 내가 문자를 입력하는 방식이 아니라, 정규식에서 미리 정해놓은 문자들의 집합인 캐릭터 클래스를 사용해서 원하는 문자열을 찾아보는 방법에 대해서 알아보도록 하겠습니다.</p>","tableOfContents":"","fields":{"slug":"lecture.regex-tutorial.section2.2","lecture":"regex-tutorial","category":"content"},"frontmatter":{"title":"원하는 문자 직접 찾아내기"}}},"pageContext":{"slug":"lecture.regex-tutorial.section2.2","previous":{"fields":{"slug":"lecture.regex-tutorial.section2.3","path":"/lectures/regex-tutorial/section2/3/"}},"next":{"fields":{"slug":"lecture.regex-tutorial.section2.1","path":"/lectures/regex-tutorial/section2/1/"}}}}}