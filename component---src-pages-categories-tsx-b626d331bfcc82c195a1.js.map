{"version":3,"sources":["webpack:///./src/components/SimplePostItem.tsx","webpack:///./src/containers/CategoriesPage/index.tsx","webpack:///./src/pages/categories.tsx","webpack:///./node_modules/@material-ui/core/esm/CardHeader/CardHeader.js","webpack:///./src/components/cards/widgets/index.tsx","webpack:///./src/components/cards/widgets/RecentPosts.tsx","webpack:///./node_modules/@material-ui/core/esm/ListItemSecondaryAction/ListItemSecondaryAction.js","webpack:///./src/components/cards/widgets/Categories.tsx","webpack:///./src/hooks/useAllCategories.ts"],"names":["useStyles","makeStyles","shape","palette","link","color","textDecoration","item","borderRadius","transition","backgroundColor","grey","thumbnail","width","height","margin","SimplePostItem","title","path","date","categories","onClick","styles","category","useMemo","join","to","className","container","spacing","xs","src","alt","gutterBottom","variant","logger","generateLogger","handleCategoryClick","categoryName","click","handleRecentPostClick","CategoriesPage","useEffect","view","Layout","right","RecentPosts","SEO","Categories","onClickCategory","props","ref","action","avatar","classes","_props$component","component","Component","_props$disableTypogra","disableTypography","subheaderProp","subheader","subheaderTypographyProps","titleProp","titleTypographyProps","other","type","Typography","display","root","content","withStyles","alignItems","padding","flex","marginRight","alignSelf","marginTop","name","WidgetCard","children","Card","CardContent","wrapper","RecentPostsCard","posts","useAllPosts","recent","splice","useCallback","map","post","index","key","fields","frontmatter","childImageSharp","fixed","muiName","position","top","transform","theme","listStyle","overflow","chip","fontSize","CategoriesCard","lang","allMarkdownRemark","group","filter","nodes","length","fieldValue","totalCount","useAllCategories","useRecoilState","languageAtom","getCategoryPath","usePageRouteUtils","List","dense","ListItem","button","ListItemText","Chip","label","size"],"mappings":"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","file":"component---src-pages-categories-tsx-b626d331bfcc82c195a1.js","sourcesContent":["import React, { useMemo } from 'react';\nimport { Grid, Typography, makeStyles, Theme } from '@material-ui/core';\nimport { Link, graphql } from 'gatsby';\n\nconst useStyles = makeStyles<Theme>(({ shape, palette }) => ({\n  link: {\n    color: 'inherit',\n    textDecoration: 'none',\n  },\n  item: {\n    borderRadius: shape.borderRadius,\n    transition: 'background-color 0.3s ease-in-out',\n    '&:hover': {\n      backgroundColor: palette.grey['100'],\n    },\n  },\n  thumbnail: {\n    width: 64,\n    height: 64,\n    margin: 0,\n    borderRadius: shape.borderRadius,\n  },\n}));\n\ninterface Props {\n  thumbnail: string;\n  title: string;\n  path: string;\n  date?: string;\n  categories?: string[];\n  onClick?: (path: string) => void;\n}\nconst SimplePostItem = ({ thumbnail, title, path, date = '', categories = [], onClick }: Props) => {\n  const styles = useStyles();\n  const category = useMemo(() => {\n    if (categories != null) {\n      return categories.join('/');\n    } else {\n      return '';\n    }\n  }, [categories]);\n  return (\n    <Link to={path} className={styles.link}>\n      <Grid container spacing={2} onClick={() => onClick?.(path)} className={styles.item}>\n        <Grid item xs=\"auto\">\n          <img src={thumbnail} alt={title} title={title} className={styles.thumbnail} />\n        </Grid>\n        <Grid item xs={true}>\n          <Typography color=\"textSecondary\" gutterBottom variant=\"caption\">\n            {date}\n          </Typography>\n          <Typography variant=\"body2\">{title}</Typography>\n          <Typography color=\"textSecondary\" variant=\"caption\">\n            {category}\n          </Typography>\n        </Grid>\n      </Grid>\n    </Link>\n  );\n};\n\nexport default SimplePostItem;\n\nexport const query = graphql`\n  fragment SimplePostItemQuery on MarkdownRemark {\n    fields {\n      path\n      lang\n    }\n    frontmatter {\n      title\n      categories\n      date(formatString: \"YYYY-MM-DD\")\n      thumbnail {\n        childImageSharp {\n          fixed(width: 320, height: 320, quality: 100, cropFocus: CENTER) {\n            src\n          }\n        }\n      }\n    }\n  }\n`;\n","import React, { useEffect } from 'react';\nimport Layout from 'components/Layout';\nimport SEO from 'components/SEO';\nimport CategoriesCard from 'components/cards/widgets/Categories';\nimport RecentPostsCard from 'components/cards/widgets/RecentPosts';\nimport { generateLogger } from 'utils/loggers';\n\nconst logger = generateLogger('categories_page');\nconst handleCategoryClick = (categoryName: string) => {\n  logger.click('click_category', { categoryName });\n};\nconst handleRecentPostClick = (path: string) => {\n  logger.click('click_recent_posting', { path });\n};\n\nconst CategoriesPage = () => {\n  useEffect(() => {\n    logger.view();\n  }, []);\n\n  return (\n    <Layout right={<RecentPostsCard onClick={handleRecentPostClick} />}>\n      <SEO title=\"카테고리\" />\n      <CategoriesCard onClickCategory={handleCategoryClick} />\n    </Layout>\n  );\n};\n\nexport default CategoriesPage;\n","import React from 'react';\nimport Page from 'containers/CategoriesPage';\nexport default () => <Page />;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: 16\n  },\n\n  /* Styles applied to the avatar element. */\n  avatar: {\n    flex: '0 0 auto',\n    marginRight: 16\n  },\n\n  /* Styles applied to the action element. */\n  action: {\n    flex: '0 0 auto',\n    alignSelf: 'flex-start',\n    marginTop: -8,\n    marginRight: -8\n  },\n\n  /* Styles applied to the content wrapper element. */\n  content: {\n    flex: '1 1 auto'\n  },\n\n  /* Styles applied to the title Typography element. */\n  title: {},\n\n  /* Styles applied to the subheader Typography element. */\n  subheader: {}\n};\nvar CardHeader = React.forwardRef(function CardHeader(props, ref) {\n  var action = props.action,\n      avatar = props.avatar,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      subheaderProp = props.subheader,\n      subheaderTypographyProps = props.subheaderTypographyProps,\n      titleProp = props.title,\n      titleTypographyProps = props.titleTypographyProps,\n      other = _objectWithoutProperties(props, [\"action\", \"avatar\", \"classes\", \"className\", \"component\", \"disableTypography\", \"subheader\", \"subheaderTypographyProps\", \"title\", \"titleTypographyProps\"]);\n\n  var title = titleProp;\n\n  if (title != null && title.type !== Typography && !disableTypography) {\n    title = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: avatar ? 'body2' : 'h5',\n      className: classes.title,\n      component: \"span\",\n      display: \"block\"\n    }, titleTypographyProps), title);\n  }\n\n  var subheader = subheaderProp;\n\n  if (subheader != null && subheader.type !== Typography && !disableTypography) {\n    subheader = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: avatar ? 'body2' : 'body1',\n      className: classes.subheader,\n      color: \"textSecondary\",\n      component: \"span\",\n      display: \"block\"\n    }, subheaderTypographyProps), subheader);\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), avatar && /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.avatar\n  }, avatar), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.content\n  }, title, subheader), action && /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.action\n  }, action));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardHeader.propTypes = {\n  /**\n   * The action to display in the card header.\n   */\n  action: PropTypes.node,\n\n  /**\n   * The Avatar for the Card Header.\n   */\n  avatar: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, `subheader` and `title` won't be wrapped by a Typography component.\n   * This can be useful to render an alternative Typography variant by wrapping\n   * the `title` text, and optional `subheader` text\n   * with the Typography component.\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\n   * The content of the component.\n   */\n  subheader: PropTypes.node,\n\n  /**\n   * These props will be forwarded to the subheader\n   * (as long as disableTypography is not `true`).\n   */\n  subheaderTypographyProps: PropTypes.object,\n\n  /**\n   * The content of the Card Title.\n   */\n  title: PropTypes.node,\n\n  /**\n   * These props will be forwarded to the title\n   * (as long as disableTypography is not `true`).\n   */\n  titleTypographyProps: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardHeader'\n})(CardHeader);","import React, { ReactNode } from 'react';\nimport { Card, CardContent, CardHeader, Typography } from '@material-ui/core';\n\ninterface Props {\n  title?: string;\n  children: ReactNode;\n}\nconst WidgetCard = ({ title = '', children }: Props) => {\n  return (\n    <Card variant=\"outlined\">\n      <CardHeader\n        title={\n          <Typography variant=\"caption\" color=\"textSecondary\">\n            {title}\n          </Typography>\n        }\n      />\n      <CardContent>{children}</CardContent>\n    </Card>\n  );\n};\n\nexport default WidgetCard;\n","import React, { useCallback, useMemo } from 'react';\nimport SimplePostItem from 'src/components/SimplePostItem';\nimport WidgetCard from 'components/cards/widgets';\nimport { makeStyles } from '@material-ui/core';\nimport { useAllPosts } from 'hooks/useAllPosts';\n\nconst MAX_POST_COUNT = 5;\nconst useStyles = makeStyles({\n  wrapper: {\n    margin: 0,\n    padding: 0,\n  },\n});\n\ninterface Props {\n  onClick?: (path: string) => void;\n}\nconst RecentPostsCard = ({ onClick }: Props) => {\n  const styles = useStyles();\n  const posts = useAllPosts();\n\n  const recent = useMemo(() => {\n    return posts.splice(0, MAX_POST_COUNT);\n  }, [posts]);\n\n  const handleRecentPostClick = useCallback(\n    (path: string) => {\n      onClick?.(path);\n    },\n    [onClick]\n  );\n\n  return (\n    <WidgetCard title=\"최근 글\">\n      <ul className={styles.wrapper}>\n        {recent.map((post, index) => (\n          <SimplePostItem\n            key={post.fields.path ?? index}\n            thumbnail={post.frontmatter.thumbnail?.childImageSharp?.fixed?.src ?? ''}\n            title={post.frontmatter.title ?? ''}\n            date={post.frontmatter.date}\n            path={post.fields.path ?? '/'}\n            categories={post.frontmatter.categories}\n            onClick={() => handleRecentPostClick(post.fields.path)}\n          />\n        ))}\n      </ul>\n    </WidgetCard>\n  );\n};\n\nexport default RecentPostsCard;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    position: 'absolute',\n    right: 16,\n    top: '50%',\n    transform: 'translateY(-50%)'\n  }\n};\n/**\n * Must be used as the last child of ListItem to function properly.\n */\n\nvar ListItemSecondaryAction = React.forwardRef(function ListItemSecondaryAction(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemSecondaryAction.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally an `IconButton` or selection control.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nListItemSecondaryAction.muiName = 'ListItemSecondaryAction';\nexport default withStyles(styles, {\n  name: 'MuiListItemSecondaryAction'\n})(ListItemSecondaryAction);","import React, { useCallback } from 'react';\nimport WidgetCard from 'components/cards/widgets';\nimport { Link } from 'gatsby';\nimport { Chip, List, ListItem, ListItemText, ListItemSecondaryAction, makeStyles, Theme } from '@material-ui/core';\nimport { useAllCategories } from 'hooks/useAllCategories';\nimport { useRecoilState } from 'recoil';\nimport { languageAtom } from 'atoms/language';\nimport { usePageRouteUtils } from 'hooks/usePageRouteUtils';\nimport { useAllPosts } from 'src/hooks/useAllPosts';\n\nconst useStyles = makeStyles<Theme>(theme => ({\n  link: {\n    color: 'inherit',\n    textDecoration: 'none',\n  },\n  item: {\n    listStyle: 'none',\n    padding: theme.spacing(1),\n    borderRadius: theme.shape.borderRadius / 2,\n    overflow: 'hidden',\n  },\n  chip: {\n    borderRadius: theme.shape.borderRadius,\n    fontSize: '0.6rem',\n    height: 'auto',\n    padding: '0.3rem 0',\n    backgroundColor: theme.palette.grey['200'],\n  },\n}));\n\ninterface Props {\n  onClickCategory?: (category: string) => void;\n}\nconst CategoriesCard = ({ onClickCategory }: Props) => {\n  const styles = useStyles();\n  const [lang] = useRecoilState(languageAtom);\n  const categories = useAllCategories(lang);\n  const posts = useAllPosts();\n  const { getCategoryPath } = usePageRouteUtils();\n\n  const handleCategoryClick = useCallback(\n    (category: string) => {\n      onClickCategory?.(category);\n    },\n    [onClickCategory]\n  );\n\n  return (\n    <WidgetCard title=\"카테고리\">\n      <List component=\"nav\" dense={true}>\n        <Link to=\"/\" className={styles.link}>\n          <ListItem button className={styles.item} onClick={() => handleCategoryClick('전체')}>\n            <ListItemText>전체</ListItemText>\n            <ListItemSecondaryAction>\n              <Chip className={styles.chip} label={posts.length} size=\"small\" />\n            </ListItemSecondaryAction>\n          </ListItem>\n        </Link>\n        {categories.map(({ fieldValue, totalCount }, index) => (\n          <Link key={index} to={getCategoryPath(fieldValue)} className={styles.link}>\n            <ListItem button className={styles.item} onClick={() => handleCategoryClick(fieldValue)}>\n              <ListItemText>{fieldValue}</ListItemText>\n              <ListItemSecondaryAction>\n                <Chip className={styles.chip} label={totalCount} size=\"small\" />\n              </ListItemSecondaryAction>\n            </ListItem>\n          </Link>\n        ))}\n      </List>\n    </WidgetCard>\n  );\n};\n\nexport default CategoriesCard;\n","import { useStaticQuery, graphql } from 'gatsby';\nimport { SupportedLanguages } from 'models/site';\nimport { GroupItem } from 'models/query';\n\ninterface CategoryQueryResult {\n  allMarkdownRemark: {\n    group: Array<GroupItem<{ fields: { lang: SupportedLanguages } }>>;\n  };\n}\nexport const useAllCategories = (lang: SupportedLanguages = 'ko') => {\n  const {\n    allMarkdownRemark: { group },\n  } = useStaticQuery<CategoryQueryResult>(graphql`\n    query {\n      allMarkdownRemark {\n        group(field: frontmatter___categories) {\n          fieldValue\n          totalCount\n          nodes {\n            fields {\n              lang\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  /** @TODO 현재 랭귀지에 속한 포스팅만 totalCount에 포함되도록 수정 */\n  const currentLanguegeCategories = group.filter(\n    ({ nodes }) => nodes.filter(({ fields }) => fields.lang === lang).length > 0\n  );\n\n  return currentLanguegeCategories.map(({ fieldValue, totalCount }) => ({ fieldValue, totalCount }));\n};\n"],"sourceRoot":""}