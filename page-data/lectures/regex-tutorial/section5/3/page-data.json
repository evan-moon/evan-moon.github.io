{"componentChunkName":"component---src-templates-lecture-page-template-tsx","path":"/lectures/regex-tutorial/section5/3/","result":{"data":{"markdownRemark":{"id":"a0428ec8-641d-5056-9612-07e958f44c52","excerpt":"이번 강의에서는 캡처 그룹의 두 번째 기능인 캡처링에 대해서 알아보겠습니다. 일단 캡처 그룹을 소개하는 강의에서 간단하게 캡처링에 대한 설명을 했었죠? 이전 강의에서 설명했듯이, 캡처링은 그냥 캡처 그룹을 사용해서 내가 정규식 내에서 캡처할 부분을 …","html":"<p>이번 강의에서는 캡처 그룹의 두 번째 기능인 캡처링에 대해서 알아보겠습니다.</p>\n<p>일단 캡처 그룹을 소개하는 강의에서 간단하게 캡처링에 대한 설명을 했었죠? 이전 강의에서 설명했듯이, 캡처링은 그냥 캡처 그룹을 사용해서 내가 정규식 내에서 캡처할 부분을 정하고, 그리고 그걸 다시 불러올 수 있는 기능이에요.</p>\n<p>자, 한번 예시를 볼게요. 간단한 정규식 표현과 캡처 그룹을 작성해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/Hel(lo)/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>계속 반복해서 이야기하고 있지만, 정규식 내에서 캡처 그룹을 만드는 방법은 굉장히 간단합니다. 그냥 괄호를 사용해서 내가 캡처하고 싶은 부분을 묶어주면 돼요.</p>\n<p>이렇게 내가 원하는 부분을 캡처 그룹으로 지정을 하고나서 하단에 있는 Tools를 한번 볼까요?</p>\n<p>Tools를 보면 방금 제가 지정한 캡처 그룹이 “Capturing Group”이라는 이름으로 묶여있는 것을 볼 수가 있죠? 그리고 옆에는 #1이라는 번호가 부여되어있습니다. 이 번호가 이 캡쳐 그룹의 아이디라고 보시면 돼요.</p>\n<p>아까 캡처링은 정규식 내에서 캡처할 부분을 정하고, 그리고 그걸 다시 불러올 수 있는 기능이라고 설명을 드렸는데요. 이렇게 캡처를 했으면 다시 불러올 수도 있겠죠?</p>\n<p>캡쳐된 표현을 다시 불러오는 방법도 꽤 직관적이라고 볼 수 있는데요. 바로 캡처 그룹에 부여된 이 숫자, 캡처 그룹의 아이디를 사용하면 됩니다.</p>\n<p>캡처 그룹은 보통 두 가지 상황에서 주로 사용을 하게 되는데요. 첫 번째는 이 캡쳐한 표현을 정규식 내에서 다시 사용하는 상황이고, 두 번째는 정규식을 사용해서 문자열 치환, Replace를 할 때 캡쳐한 부분을 불러오는 상황입니다.</p>\n<h2 id=\"정규식-내에서-불러오기\" style=\"position:relative;\">정규식 내에서 불러오기<a href=\"#%EC%A0%95%EA%B7%9C%EC%8B%9D-%EB%82%B4%EC%97%90%EC%84%9C-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0\" aria-label=\"정규식 내에서 불러오기 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>일단 첫 번째 상황인, 캡쳐한 표현을 정규식 내에서 다시 사용하는 상황부터 같이 살펴볼게요.</p>\n<p>캡쳐한 표현을 정규식 내에서 다시 불러오고 싶을 때는, 정규식 표현에 <code class=\"language-text\">\\</code> 와 불러오고 싶은 캡쳐 그룹의 아이디를 적어주면 됩니다. 이렇게요.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/Hel(lo)\\1/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이 표현에서 <code class=\"language-text\">\\1</code> 은 “1번 캡쳐 그룹을 통해 저장된 표현을 불러와라”라는 의미를 가집니다. 지금 이 표현에서 1번 캡쳐 그룹을 통해 캡쳐된 표현은 뭐죠? <code class=\"language-text\">lo</code> 죠. 결국 이 <code class=\"language-text\">\\1</code> 이라는 표현은 <code class=\"language-text\">lo</code> 라는 표현을 다시 불러오고 있는 거라고 보시면 됩니다.</p>\n<h3 id=\"이걸-풀어보면-어떤-모양일까\" style=\"position:relative;\">이걸 풀어보면 어떤 모양일까?<a href=\"#%EC%9D%B4%EA%B1%B8-%ED%92%80%EC%96%B4%EB%B3%B4%EB%A9%B4-%EC%96%B4%EB%96%A4-%EB%AA%A8%EC%96%91%EC%9D%BC%EA%B9%8C\" aria-label=\"이걸 풀어보면 어떤 모양일까 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>다시 이걸 알아보기 쉽게 풀어서 써본다면 캡쳐 그룹의 내용이 한번 더 반복된, 이런 느낌의 표현이 되겠죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/Hel(lo)(lo)/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>대충 이해되시죠? 그냥 저장한 표현을 다시 불러온 것 뿐이에요.</p>\n<p>하지만 사실 이게 캡처 그룹을 썼을 때와 정확히 같은 표현은 아닙니다. 왜냐하면 캡쳐 그룹을 사용해서 불러온 그룹은 캡처링 기능은 가지지 않고 그룹핑 기능만 가지고 있기 때문이에요. 이런 그룹을 우리는 캡쳐를 하지 않는 그룹이라는 의미의 Non Capture Group이라고 부릅니다.</p>\n<p>Non Capture Group은 캡쳐 그룹의 앞 쪽에 <code class=\"language-text\">?:</code> 을 붙혀주면 표현할 수 있어요.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/Hel(?:lo)(?:lo)/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>사실 이 녀석은 사용 빈도가 높지 않은 녀석이라 이 강의에서 자세히 다루지는 않을 내용이지만, 그냥 이런 녀석도 존재한다는 것 정도만 알고 계셔도 충분합니다.</p>\n<p>어쨌든 앞서 여러 번 이야기했듯이 캡쳐 그룹이라는 녀석은 캡쳐링 기능 외에도 그룹핑 기능까지 가지고 있는 녀석이에요. 그래서 캡쳐 그룹을 사용하여 <code class=\"language-text\">lo</code> 라는 표현을 묶으면 자연스럽게 이 표현들이 그룹핑까지 되게 되는거죠.</p>\n<p>이 표현을 이제 다시 캡쳐 그룹을 써서 불러온 표현으로 바꿔볼게요.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/Hel(lo)\\1/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>자, 여기서 이 <code class=\"language-text\">lo</code> 라는 표현은 그룹핑 되어있는 상태죠? 그래서 제가 <code class=\"language-text\">\\1</code> 을 사용해서 다시 불러온 이 표현 또한 “그룹핑” 되어있는 상태로 불러와지게 됩니다. 그룹핑 되어있는 표현을 캡쳐했고, 그걸 다시 불러왔으니까 당연한거죠?</p>\n<p>하지만 이렇게 불러와진 그룹은 “캡쳐링” 기능은 없는 Non Capture Group으로 만들어진다고 했죠?. 왜일까요?</p>\n<p>조금만 생각해보면 너무나도 당연한 사실인데, 한번 이렇게 캡쳐되서 불러와진 그룹이 또 캡쳐링 기능을 가지고 있다고 하면…캡쳐된 표현을 불러왔을 뿐인데, 의도하지 않게 새로운 캡쳐 그룹을 만들어 내게 됩니다.</p>\n<p>이 <code class=\"language-text\">\\1</code> 의 역할은 “불러오기”인데, “캡쳐 그룹을 생성하기”라는 기능까지 여기에 섞여버리는 거에요. 그러면 혼란스럽겠죠? 왜 혼란스럽냐. 자, 예를 들어서</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/Hel(lo)\\1(a)/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이런 표현이 있다고 해볼게요. 자, 그럼 <code class=\"language-text\">lo</code> 가 묶인 이 캡쳐 그룹의 아이디는 몇 번일까요? 1번이겠죠?</p>\n<p>그리고 <code class=\"language-text\">a</code> 가 묶인 이 캡쳐 그룹의 아이디는 몇 번인게 자연스러울까요? 2번 이겠죠? 왜냐? 저는 캡쳐 그룹을 2개 썼으니까요. 1번, 2번 이렇게 아이디가 부여되는게 자연스럽고 직관적이죠.</p>\n<p>하지만 캡쳐링 된 그룹을 불러왔을 때 Non Capture Group이 아니라 캡쳐 그룹으로 불러온다고 생각해보면, 이 <code class=\"language-text\">\\1</code> 부분에서 새로운 캡쳐 그룹이 생성되어버린다는거에요. 그래서 이 부분이 2번 캡쳐 그룹이 되고, <code class=\"language-text\">a</code> 가 묶인 이 캡쳐 그룹은 3번 캡쳐 그룹이 됩니다…내가 쓴건 캡쳐 그룹 2개인데, 아이디는 쌩뚱맞게 3번이 되어버리는 이런 상황…혼란스럽겠죠?</p>\n<p>자, 이 차이가 잘 이해가 안 가신다면 수량자를 사용하면 쉽게 눈으로 확인해볼 수 있습니다. 제가 만약에 캡쳐 그룹을 사용해서 불러온 표현에 수량자를 사용하면 어떻게 될까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/Hel(lo)\\1{2}/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이 수량자는 l이나 o같이 어떤 문자 하나를 의미하는 표현이 아니라 이 그룹 전체의 개수를 세게 된다고 했었잖아요?</p>\n<p>자, 보면 Hello가 하나만 있는 문자열에는 매칭이 되지 않지만, Hel 뒤에 lo가 두 번 연속으로 등장하는 문자열에서는 매칭이 되죠? 그럼 제가 이 캡처했던 패턴을 한번 더 불러오면 어떻게 될까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/(Hello)\\1\\1/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>그럼 Hello가 3번 연속으로 등장하는 문자열에 매칭이 되겠죠? 자, 근데 이거 그냥 사실 수량자로 해도 돼요. 그냥 Hello 뒤에 수량자로 3 붙혀주면 되잖아요?</p>\n<p>이렇게요.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/(Hello){3}/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2 id=\"논-캡처-그룹\" style=\"position:relative;\">논 캡처 그룹<a href=\"#%EB%85%BC-%EC%BA%A1%EC%B2%98-%EA%B7%B8%EB%A3%B9\" aria-label=\"논 캡처 그룹 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%A0%95%EA%B7%9C%EC%8B%9D-%EB%82%B4%EC%97%90%EC%84%9C-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0\">정규식 내에서 불러오기</a></p>\n<ul>\n<li><a href=\"#%EC%9D%B4%EA%B1%B8-%ED%92%80%EC%96%B4%EB%B3%B4%EB%A9%B4-%EC%96%B4%EB%96%A4-%EB%AA%A8%EC%96%91%EC%9D%BC%EA%B9%8C\">이걸 풀어보면 어떤 모양일까?</a></li>\n</ul>\n</li>\n<li><a href=\"#%EB%85%BC-%EC%BA%A1%EC%B2%98-%EA%B7%B8%EB%A3%B9\">논 캡처 그룹</a></li>\n</ul>","fields":{"slug":"lecture.regex-tutorial.section5.3","lecture":"regex-tutorial","category":"content"},"frontmatter":{"title":"내가 원하는 패턴을 저장하고 불러오는 캡처링"}}},"pageContext":{"slug":"lecture.regex-tutorial.section5.3","previous":{"fields":{"slug":"lecture.regex-tutorial.section5","path":"/lectures/regex-tutorial/section5/"}},"next":{"fields":{"slug":"lecture.regex-tutorial.section5.1","path":"/lectures/regex-tutorial/section5/1/"}}}}}