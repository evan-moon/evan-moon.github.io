{"version":3,"sources":["webpack:///./src/hooks/useAllPosts.ts","webpack:///./src/components/Items/SimplePostItem.tsx"],"names":["useAllPosts","ignoreLanguage","lang","useRecoilState","languageAtom","allMarkdownRemark","edges","map","node","filter","p","fields","useStyles","makeStyles","shape","palette","link","color","textDecoration","item","borderRadius","transition","backgroundColor","grey","thumbnail","width","height","margin","SimplePostItem","title","path","date","categories","onClick","styles","category","useMemo","join","to","className","container","spacing","xs","src","alt","gutterBottom","variant"],"mappings":"qKAKaA,EAAc,SAACC,QAA0B,IAA1BA,OAAiB,GAAS,IAC7CC,EAAQC,yBAAeC,KADsB,GAkBpD,OAhBa,OAYqBC,kBAAkBC,MACjDC,KAAI,qBAAGC,QACPC,QAAO,SAACC,GAAD,OAAcT,GAAiBS,EAAEC,OAAOT,OAASA,O,qHCjBvDU,EAAYC,aAAkB,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,QAAV,MAAyB,CAC3DC,KAAM,CACJC,MAAO,UACPC,eAAgB,QAElBC,KAAM,CACJC,aAAcN,EAAMM,aACpBC,WAAY,oCACZ,UAAW,CACTC,gBAAiBP,EAAQQ,KAAK,OAGlCC,UAAW,CACTC,MAAO,GACPC,OAAQ,GACRC,OAAQ,EACRP,aAAcN,EAAMM,kBAyCTQ,IA7BQ,SAAC,GAA2E,IAAzEJ,EAAyE,EAAzEA,UAAWK,EAA8D,EAA9DA,MAAOC,EAAuD,EAAvDA,KAAuD,IAAjDC,YAAiD,MAA1C,GAA0C,MAAtCC,kBAAsC,MAAzB,GAAyB,EAArBC,EAAqB,EAArBA,QACtEC,EAAStB,IACTuB,EAAWC,mBAAQ,WACvB,OAAkB,MAAdJ,EACKA,EAAWK,KAAK,KAEhB,KAER,CAACL,IACJ,OACE,kBAAC,OAAD,CAAMM,GAAIR,EAAMS,UAAWL,EAAOlB,MAChC,kBAAC,IAAD,CAAMwB,WAAS,EAACC,QAAS,EAAGR,QAAS,kBAAMA,aAAN,EAAMA,EAAUH,IAAOS,UAAWL,EAAOf,MAC5E,kBAAC,IAAD,CAAMA,MAAI,EAACuB,GAAG,QACZ,yBAAKC,IAAKnB,EAAWoB,IAAKf,EAAOA,MAAOA,EAAOU,UAAWL,EAAOV,aAEnE,kBAAC,IAAD,CAAML,MAAI,EAACuB,IAAI,GACb,kBAAC,IAAD,CAAYzB,MAAM,gBAAgB4B,cAAY,EAACC,QAAQ,WACpDf,GAEH,kBAAC,IAAD,CAAYe,QAAQ,SAASjB,GAC7B,kBAAC,IAAD,CAAYZ,MAAM,gBAAgB6B,QAAQ,WACvCX,Q","file":"b9dc28c0ccbab684590db650bf09d9662627a928-ff0409f9c040eff47894.js","sourcesContent":["import { useStaticQuery, graphql } from 'gatsby';\nimport { Post } from 'models/post';\nimport { useRecoilState } from 'recoil';\nimport { languageAtom } from 'atoms/language';\n\nexport const useAllPosts = (ignoreLanguage = true) => {\n  const [lang] = useRecoilState(languageAtom);\n  const data = useStaticQuery(graphql`\n    query AllPostsQuery {\n      allMarkdownRemark(sort: { fields: frontmatter___date, order: DESC }) {\n        edges {\n          node {\n            ...PostQueryFragment\n          }\n        }\n      }\n    }\n  `);\n\n  const frontmatters: Post[] = data.allMarkdownRemark.edges\n    .map(({ node }: { node: Post }) => node)\n    .filter((p: Post) => (ignoreLanguage ? p.fields.lang === lang : true));\n\n  return frontmatters;\n};\n","import React, { useMemo } from 'react';\nimport { Grid, Typography, makeStyles, Theme } from '@material-ui/core';\nimport { Link, graphql } from 'gatsby';\n\nconst useStyles = makeStyles<Theme>(({ shape, palette }) => ({\n  link: {\n    color: 'inherit',\n    textDecoration: 'none',\n  },\n  item: {\n    borderRadius: shape.borderRadius,\n    transition: 'background-color 0.3s ease-in-out',\n    '&:hover': {\n      backgroundColor: palette.grey['100'],\n    },\n  },\n  thumbnail: {\n    width: 64,\n    height: 64,\n    margin: 0,\n    borderRadius: shape.borderRadius,\n  },\n}));\n\ninterface Props {\n  thumbnail: string;\n  title: string;\n  path: string;\n  date?: string;\n  categories?: string[];\n  onClick?: (path: string) => void;\n}\nconst SimplePostItem = ({ thumbnail, title, path, date = '', categories = [], onClick }: Props) => {\n  const styles = useStyles();\n  const category = useMemo(() => {\n    if (categories != null) {\n      return categories.join('/');\n    } else {\n      return '';\n    }\n  }, [categories]);\n  return (\n    <Link to={path} className={styles.link}>\n      <Grid container spacing={2} onClick={() => onClick?.(path)} className={styles.item}>\n        <Grid item xs=\"auto\">\n          <img src={thumbnail} alt={title} title={title} className={styles.thumbnail} />\n        </Grid>\n        <Grid item xs={true}>\n          <Typography color=\"textSecondary\" gutterBottom variant=\"caption\">\n            {date}\n          </Typography>\n          <Typography variant=\"body2\">{title}</Typography>\n          <Typography color=\"textSecondary\" variant=\"caption\">\n            {category}\n          </Typography>\n        </Grid>\n      </Grid>\n    </Link>\n  );\n};\n\nexport default SimplePostItem;\n\nexport const query = graphql`\n  fragment SimplePostItemQuery on MarkdownRemark {\n    fields {\n      path\n      lang\n    }\n    frontmatter {\n      title\n      categories\n      date(formatString: \"YYYY-MM-DD\")\n      thumbnail {\n        childImageSharp {\n          fixed(width: 320, height: 320, quality: 100, cropFocus: CENTER) {\n            src\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}