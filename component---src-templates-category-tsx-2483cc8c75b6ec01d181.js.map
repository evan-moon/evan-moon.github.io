{"version":3,"sources":["webpack:///./node_modules/lodash/_unicodeToArray.js","webpack:///./node_modules/lodash/_createCaseFirst.js","webpack:///./node_modules/lodash/startCase.js","webpack:///./src/templates/Category.tsx","webpack:///./node_modules/lodash/_stringToArray.js","webpack:///./node_modules/lodash/_baseSlice.js","webpack:///./node_modules/lodash/_asciiToArray.js","webpack:///./node_modules/lodash/upperFirst.js","webpack:///./node_modules/lodash/_hasUnicode.js","webpack:///./node_modules/lodash/_castSlice.js"],"names":["rsAstral","rsCombo","rsFitz","rsNonAstral","rsRegional","rsSurrPair","reOptMod","rsSeq","join","rsSymbol","reUnicode","RegExp","module","exports","string","match","castSlice","hasUnicode","stringToArray","toString","methodName","strSymbols","undefined","chr","charAt","trailing","slice","createCompounder","upperFirst","startCase","result","word","index","CategoryTemplate","data","location","allMarkdownRemark","posts","edges","pageInfo","pathname","split","categoryPath","categorySlug","path","left","css","right","title","map","p","node","pageCount","currentPage","defaultUrl","pageQuery","asciiToArray","unicodeToArray","array","start","end","length","Array","createCaseFirst","reHasUnicode","test","baseSlice"],"mappings":"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","file":"component---src-templates-category-tsx-2483cc8c75b6ec01d181.js","sourcesContent":["require(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.regexp.constructor\");\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange = \"\\\\ud800-\\\\udfff\",\n    rsComboMarksRange = \"\\\\u0300-\\\\u036f\",\n    reComboHalfMarksRange = \"\\\\ufe20-\\\\ufe2f\",\n    rsComboSymbolsRange = \"\\\\u20d0-\\\\u20ff\",\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = \"\\\\ufe0e\\\\ufe0f\";\n/** Used to compose unicode capture groups. */\n\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = \"\\\\ud83c[\\\\udffb-\\\\udfff]\",\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = \"(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}\",\n    rsSurrPair = \"[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]\",\n    rsZWJ = \"\\\\u200d\";\n/** Used to compose unicode regexes. */\n\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\n\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\nmodule.exports = unicodeToArray;","var castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n/**\n * Creates a function like `_.lowerFirst`.\n *\n * @private\n * @param {string} methodName The name of the `String` case method to use.\n * @returns {Function} Returns the new case function.\n */\n\n\nfunction createCaseFirst(methodName) {\n  return function (string) {\n    string = toString(string);\n    var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;\n    var chr = strSymbols ? strSymbols[0] : string.charAt(0);\n    var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);\n    return chr[methodName]() + trailing;\n  };\n}\n\nmodule.exports = createCaseFirst;","var createCompounder = require('./_createCompounder'),\n    upperFirst = require('./upperFirst');\n/**\n * Converts `string` to\n * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n *\n * @static\n * @memberOf _\n * @since 3.1.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the start cased string.\n * @example\n *\n * _.startCase('--foo-bar--');\n * // => 'Foo Bar'\n *\n * _.startCase('fooBar');\n * // => 'Foo Bar'\n *\n * _.startCase('__FOO_BAR__');\n * // => 'FOO BAR'\n */\n\n\nvar startCase = createCompounder(function (result, word, index) {\n  return result + (index ? ' ' : '') + upperFirst(word);\n});\nmodule.exports = startCase;","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport { graphql } from 'gatsby';\nimport { Box } from '@material-ui/core';\nimport BioCard from 'components/Cards/BioCard';\nimport Layout from 'components/Layout';\nimport SEO from 'components/SEO';\nimport Posts from 'components/Posts';\nimport RecentPostsCard from 'components/Cards/RecentPostsCard';\nimport CategoriesCard from 'src/components/Cards/CategoriesCard';\nimport Paginator from 'src/components/Paginator';\nimport { Fragment } from 'react';\nimport startCase from 'lodash/startCase';\n\ninterface Props {\n  data: {\n    allMarkdownRemark: any;\n    site: {\n      siteMetadata: {\n        title: string;\n      };\n    };\n  };\n  location: Location;\n}\n\nconst CategoryTemplate = ({ data, location }: Props) => {\n  const {\n    allMarkdownRemark: { edges: posts, pageInfo },\n  } = data;\n  const [, categoryPath, categorySlug] = location.pathname.split('/');\n  const path = `/${categoryPath}/${categorySlug}`;\n\n  return (\n    <Layout\n      location={location}\n      left={\n        <Fragment>\n          <Box\n            css={css`\n              margin-bottom: 1rem;\n            `}\n          >\n            <BioCard />\n          </Box>\n          <Box>\n            <CategoriesCard />\n          </Box>\n        </Fragment>\n      }\n      right={<RecentPostsCard />}\n    >\n      <SEO title={startCase(categorySlug)} />\n      <Posts posts={posts.map((p: { node: any }) => p.node)} />\n      <Paginator pageCount={pageInfo.pageCount} currentPage={pageInfo.currentPage} defaultUrl={path} />\n    </Layout>\n  );\n};\n\nexport default CategoryTemplate;\n\nexport const pageQuery = graphql`\n  query CategoryQuery($skip: Int!, $limit: Int!, $category: String!) {\n    allMarkdownRemark(\n      skip: $skip\n      limit: $limit\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { categories: { in: [$category] } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 300)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"YYYY-MM-DD\")\n            title\n            path\n            categories\n            thumbnail {\n              childImageSharp {\n                fluid(maxWidth: 800) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n      pageInfo {\n        currentPage\n        pageCount\n      }\n    }\n  }\n`;\n","var asciiToArray = require('./_asciiToArray'),\n    hasUnicode = require('./_hasUnicode'),\n    unicodeToArray = require('./_unicodeToArray');\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\n\n\nfunction stringToArray(string) {\n  return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);\n}\n\nmodule.exports = stringToArray;","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : length + start;\n  }\n\n  end = end > length ? length : end;\n\n  if (end < 0) {\n    end += length;\n  }\n\n  length = start > end ? 0 : end - start >>> 0;\n  start >>>= 0;\n  var result = Array(length);\n\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n\n  return result;\n}\n\nmodule.exports = baseSlice;","require(\"core-js/modules/es6.regexp.split\");\n\n/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\nmodule.exports = asciiToArray;","var createCaseFirst = require('./_createCaseFirst');\n/**\n * Converts the first character of `string` to upper case.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.upperFirst('fred');\n * // => 'Fred'\n *\n * _.upperFirst('FRED');\n * // => 'FRED'\n */\n\n\nvar upperFirst = createCaseFirst('toUpperCase');\nmodule.exports = upperFirst;","require(\"core-js/modules/es6.regexp.constructor\");\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange = \"\\\\ud800-\\\\udfff\",\n    rsComboMarksRange = \"\\\\u0300-\\\\u036f\",\n    reComboHalfMarksRange = \"\\\\ufe20-\\\\ufe2f\",\n    rsComboSymbolsRange = \"\\\\u20d0-\\\\u20ff\",\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = \"\\\\ufe0e\\\\ufe0f\";\n/** Used to compose unicode capture groups. */\n\nvar rsZWJ = \"\\\\u200d\";\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\n\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\nmodule.exports = hasUnicode;","var baseSlice = require('./_baseSlice');\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\n\n\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return !start && end >= length ? array : baseSlice(array, start, end);\n}\n\nmodule.exports = castSlice;"],"sourceRoot":""}