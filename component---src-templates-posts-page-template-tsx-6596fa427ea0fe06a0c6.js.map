{"version":3,"sources":["webpack:///./src/containers/PostsPage/index.tsx","webpack:///./src/templates/PostsPageTemplate.tsx"],"names":["logger","generateLogger","handleCategoryClick","categoryName","click","useStyles","makeStyles","items","transition","textDecoration","transform","PostsPage","data","location","totalCount","pageContext","styles","allMarkdownRemark","edges","pageInfo","postPath","pathname","split","lang","useRecoilState","languageAtom","posts","useMemo","map","p","node","useEffect","view","Layout","title","Title","description","right","Box","Categories","onClickCategory","SEO","RowList","Grid","item","xs","key","frontmatter","className","to","fields","path","onClick","post","Paginator","pageCount","currentPage","defaultUrl","pageQuery","PostsTemplate","props"],"mappings":"8UAcMA,EAASC,YAAe,cACxBC,EAAsB,SAACC,GAC3BH,EAAOI,MAAM,iBAAkB,CAAED,kBAM7BE,EAAYC,YAAW,CAC3BC,MAAO,CACLC,WAAY,6BACZ,MAAO,CACLC,eAAgB,QAElB,UAAW,CACTC,UAAW,kBAsDFC,EA3CG,SAAC,GAA2D,IAAzDC,EAAyD,EAAzDA,KAAMC,EAAmD,EAAnDA,SAAyBC,EAA0B,EAAzCC,YAAeD,WAC5CE,EAASX,IAD6D,EAIxEO,EADFK,kBAAqBC,EAHqD,EAGrDA,MAAOC,EAH8C,EAG9CA,SAErBC,EAAYP,EAASQ,SAASC,MAAM,KAL+B,GAMrEC,EAAQC,yBAAeC,KAN8C,GAQtEC,EAAQC,mBAAQ,kBAAMT,EAAMU,KAAI,SAAAC,GAAC,OAAIA,EAAEC,UAAO,CAACZ,IAMrD,OAJAa,qBAAU,WACR/B,EAAOgC,SACN,IAGD,kBAACC,EAAA,EAAD,CACEC,MAAO,kBAACD,EAAA,EAAOE,MAAR,CAAcD,MAAM,SAASE,YAAW,KAAOtB,EAAP,UAC/CuB,MACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAgBC,gBAAiBtC,MAIrC,kBAACuC,EAAA,EAAD,CAAKP,MAAM,QACX,kBAACQ,EAAA,EAAD,KACGhB,EAAME,KAAI,SAAAC,GAAC,OACV,kBAACc,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,IAAKjB,EAAEkB,YAAYb,MAAOc,UAAWhC,EAAOT,OAC7D,kBAAC,OAAD,CAAM0C,GAAIpB,EAAEqB,OAAOC,KAAMC,QAAS,kBAjDrBD,EAiD2CtB,EAAEqB,OAAOC,UAhD3EnD,EAAOI,MAAM,gBAAiB,CAAE+C,SADV,IAACA,IAkDX,kBAAC,IAAD,CAAeE,KAAMxB,UAK7B,kBAACyB,EAAA,EAAD,CACEC,UAAWpC,EAASoC,UACpBC,YAAarC,EAASqC,YACtBC,WAAU,IAAMrC,EAAN,IACVG,KAAMA,MCnEDmC,GAFEC,UAJO,SAACC,GACrB,OAAO,kBAAC,EAAcA,IAKC","file":"component---src-templates-posts-page-template-tsx-6596fa427ea0fe06a0c6.js","sourcesContent":["import React, { useMemo, useEffect } from 'react';\nimport Layout from 'components/Layout';\nimport SEO from 'components/SEO';\nimport { generateLogger } from 'utils/loggers';\nimport { Box, Grid, makeStyles } from '@material-ui/core';\nimport CategoriesCard from 'components/Cards/Widgets/Categories';\nimport Paginator from 'components/Utils/Paginator';\nimport { PostListPageQueryResult } from 'models/query';\nimport PostIntroCard from 'components/Cards/Posts';\nimport RowList from 'components/Lists/RowList';\nimport { Link } from 'gatsby';\nimport { useRecoilState } from 'recoil';\nimport { languageAtom } from 'atoms/language';\n\nconst logger = generateLogger('posts_page');\nconst handleCategoryClick = (categoryName: string) => {\n  logger.click('click_category', { categoryName });\n};\nconst handlePostClick = (path: string) => {\n  logger.click('click_posting', { path });\n};\n\nconst useStyles = makeStyles({\n  items: {\n    transition: 'transform 0.2s ease-in-out',\n    '& a': {\n      textDecoration: 'none',\n    },\n    '&:hover': {\n      transform: 'scale(1.01)',\n    },\n  },\n});\n\ninterface Props extends PostListPageQueryResult {\n  location: Location;\n  pageContext: {\n    totalCount: number;\n  };\n}\nconst PostsPage = ({ data, location, pageContext: { totalCount } }: Props) => {\n  const styles = useStyles();\n  const {\n    allMarkdownRemark: { edges, pageInfo },\n  } = data;\n  const [, postPath] = location.pathname.split('/');\n  const [lang] = useRecoilState(languageAtom);\n\n  const posts = useMemo(() => edges.map(p => p.node), [edges]);\n\n  useEffect(() => {\n    logger.view();\n  }, []);\n\n  return (\n    <Layout\n      title={<Layout.Title title=\"전체 포스팅\" description={`총 ${totalCount}개 포스팅`} />}\n      right={\n        <Box>\n          <CategoriesCard onClickCategory={handleCategoryClick} />\n        </Box>\n      }\n    >\n      <SEO title=\"포스팅\" />\n      <RowList>\n        {posts.map(p => (\n          <Grid item xs={12} key={p.frontmatter.title} className={styles.items}>\n            <Link to={p.fields.path} onClick={() => handlePostClick(p.fields.path)}>\n              <PostIntroCard post={p} />\n            </Link>\n          </Grid>\n        ))}\n      </RowList>\n      <Paginator\n        pageCount={pageInfo.pageCount}\n        currentPage={pageInfo.currentPage}\n        defaultUrl={`/${postPath}/`}\n        lang={lang}\n      />\n    </Layout>\n  );\n};\n\nexport default PostsPage;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport PostsPage from 'containers/PostsPage';\n\nconst PostsTemplate = (props: any) => {\n  return <PostsPage {...props} />;\n};\n\nexport default PostsTemplate;\n\nexport const pageQuery = graphql`\n  query PostsQuery($skip: Int!, $limit: Int!, $lang: String!) {\n    allMarkdownRemark(\n      skip: $skip\n      limit: $limit\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { fields: { lang: { eq: $lang } } }\n    ) {\n      edges {\n        node {\n          ...PostQueryFragment\n        }\n      }\n      pageInfo {\n        currentPage\n        pageCount\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}