{"componentChunkName":"component---src-templates-lecture-page-template-tsx","path":"/lectures/regex-tutorial/section2/8/","result":{"data":{"markdownRemark":{"id":"519ecdd5-8dae-540a-b809-318b7fcb6934","excerpt":"이번 강의에서는 이전 강의에 이어서 캐릭터셋을 조금 더 편하게 사용할 수 있는 방법에 대해서 이야기를 하려고 하는데요. 만약 어떤 문자열 속에서 “한글”만 전부 뽑아내고 싶다면 어떻게 하면 될까요? 이전에 얘기했듯이 한글을 포함하고 있는 캐릭터 클래…","html":"<p>이번 강의에서는 이전 강의에 이어서 캐릭터셋을 조금 더 편하게 사용할 수 있는 방법에 대해서 이야기를 하려고 하는데요.</p>\n<p>만약 어떤 문자열 속에서 “한글”만 전부 뽑아내고 싶다면 어떻게 하면 될까요? 이전에 얘기했듯이 한글을 포함하고 있는 캐릭터 클래스는 없습니다.</p>\n<p>그러니까 결국 이전 강의에서 배웠던 캐릭터셋, 즉 커스텀한 문자들의 집합을 만들어서 문제를 해결해야해요.</p>\n<p>근데 한 가지 문제가 있죠? 단순하게 생각하면 그냥</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/[가나다라마바사아자카...]/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이렇게 쓰면 될 거 같지만, 영어랑 다르게 한글은 30자, 40자 뭐 이 정도 수준이 아닙니다. 이게 영어면 가능은 해요.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/[abcdefghi]/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>뭐 이렇게 그냥 쭉 쓰면 되잖아요? 그래도 어차피 대소문자 다 합쳐서 52자 밖에 안 됩니다. 귀찮긴 하지만 입력하는게 불가능한 숫자는 아니죠? 근데 한글은 토탈 11,172자에요. 여기서 우리가 자주 사용하는 글자들만 추린다고 해도 2,350자입니다. 어마무시하죠?</p>\n<p>근데 사람이 이 2,350자를 다 입력할 수 있을까요? 힘들겠죠.</p>\n<p>자, 그러면 이 문제를 어떻게 해결할 수 있냐. 직접 입력하기에는 너무 양이 많으니까 다른 방법을 써야할 것 같은데…바로 문자들의 범위를 지정하면 됩니다. 뭐 a부터 z까지 이런 식으로요.</p>\n<p>그래서 한글도 영어처럼 뭐 가부터 하까지 이렇게 범위를 지정하면 이 11,172자를 입력하지 않아도 됩니다. 그런데 이 범위를 지정하려면 정확히 한글의 어떤 글자가 첫 번째 글자고 어떤 글자가 마지막 글자인지 알아야겠죠?</p>\n<p>이걸 알기 위해서 우리는 정규식이 이런 문자들을 어떤 원리로 인식하고 분류하느냐에 대해서 조금 알아봐야해요.</p>\n<p>사실 우리가 정규식에 <code class=\"language-text\">/가/</code> 처럼 문자를 주면 정규식은 이 문자를 일종의 숫자 코드로 변환해서 인식합니다. 이건 사실 정규식만 그런게 아니라 컴퓨터가 문자를 인식하는 방법이에요. 컴퓨터는 아무리 날고 기어봤자 그냥 본질은 계산기거든요. 우리가 계산기에 문자를 입력할 수는 없잖아요? 그래서 컴퓨터도 우리가 문자를 입력하면 내부적으로는 숫자로 인식을 합니다.</p>\n<p>이거는 자바스크립트의 <code class=\"language-text\">String</code> 객체가 가지고 있는 <code class=\"language-text\">chatCodeAt</code> 이라는 메소드를 사용하면 컴퓨터가 이 문자를 어떤 숫자 코드로 인식하는 지를 볼 수가 있어요.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token string\">'가'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">44032</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>자 여기서 <code class=\"language-text\">charCodeAt</code> 메소드가 뱉은 <code class=\"language-text\">44032</code> 라는 숫자가 정확히 “가”라는 글자와 대응되는 코드입니다.  </p>\n<p>근데 여기서 중요한 것은 “왜 가라는 문자가 <code class=\"language-text\">44032</code>로 표현할 수 있냐”가 아니라, 그냥 어떤 문자를 의미하는 숫자 코드가 존재한다는 걸 아는 게 중요한 거에요 </p>\n<p>컴퓨터는 결국 어떤 문자를 인지하기 위해서 문자들이 등록된 테이블을 가지고 있어요. 그래서 우리가 실제로 키보드로 “가”라는 글자를 입력하면 컴퓨터는 “가”라는 글자가 아니라 <code class=\"language-text\">44032</code>라는 숫자로 입력을 하는거에요. 그리고 우리한테 보여줄 때는 이 <code class=\"language-text\">44032</code>라는 숫자를 가지고 그 테이블을 막 뒤져서 “가”라는 모양을 찾아와서 보여주는거에요.</p>\n<p>한글도 당연히 이 테이블에 등록이 되어있겠죠? 결국 “가”라는 글자가 그 테이블에서 가지고 있는 id가 44032다 정도로만 이해하고 넘어가셔도 정규식을 사용하는데는 큰 문제가 없습니다.</p>\n<p>그 말은 “한글”이 어떤 테이블에 쭉~ 연속적으로 등록이 되있다는 건데 아마 이런 느낌으로 되어있겠죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token number\">1</span> 가\n<span class=\"token number\">2</span> 나\n<span class=\"token number\">3</span> 다\n<span class=\"token number\">4</span> 라\n<span class=\"token operator\">...</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>뭐 이런 식으로 쭉 등록이 되어있을거잖아요? 뭐 이 순서는 그냥 보기 편하라고 제가 임의로 부여한 순서고 실제로는 이 순서가 아니기는 합니다. 근데 중요한 건 컴퓨터가 가지고 있는 어떤 테이블에 문자들이 이렇게 저장이 되어있고, 그 문자마다 테이블에 등록된 순서대로 이런 숫자 ID가 부여되어있다는 것을 이해하시는 게 중요합니다.</p>\n<p>우리가 정규식을 사용할 때 이 점을 잘 이용하면 2,350자를 일일히 입력하지 않고도 한글을 표현하는 캐릭터셋을 만들 수 있게 됩니다.</p>\n<p>자 그러면, 결국 범위를 지정하려면 이 테이블에 등록된 첫 번째 한글 문자가 뭔지, 그리고 마지막 한글 문자가 알아야 범위라는 걸 만들 수가 있겠죠?</p>\n<p>한번 위키를 볼까요?</p>\n<p><a href=\"https://ko.wikipedia.org/wiki/%ED%95%9C%EA%B8%80_%EC%9D%8C%EC%A0%88\" target=\"_blank\" rel=\"nofollow\">https://ko.wikipedia.org/wiki/한글_음절</a> ← 위키를 통해서 설명</p>\n<p>한글의 가장 첫 번째 글자는 “가” 에요. 자음의 가장 첫 글자와 모음의 가장 첫 글자를 합친 글자니까 당연히 이게 첫 번째겠죠? 그럼 마지막 글자는 뭐냐. 바로 “힣”입니다.</p>\n<p>그럼 다시 돌아와서 캐릭터셋에 이 “가”부터 “힣”까지의 범위를 표현하려면</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/[가-힣]/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이렇게  대시 <code class=\"language-text\">-</code>를 사용해서 문자의 “범위”를 지정할 수 있게 됩니다. 간단하죠?</p>\n<p>한 가지 주의해야 할 점은 이 범위가 컴퓨터가 가지고 있는 어떤 문자 테이블에서의 범위라고 했잖아요? 이 사실을 꼭 기억하셔야해요.</p>\n<p>이걸 인지하지 못하고 있으면 정규식이 의도하지 않은 대로 작동할 수도 있습니다. 왜냐면 한글은 이 테이블에 <code class=\"language-text\">44032</code> 번부터 <code class=\"language-text\">55203</code> 번까지 연속으로 쭉 등록이 되어있거든요?</p>\n<p>근데 이렇게 연속으로 등록이 안 되어있는 애들도 있어요. 영어 알파벳을 한번 볼까요?</p>\n<p>그냥 간단하게 생각해보면 한글이랑 비슷하게 a부터 z까지를 범위로 지정해서 캐릭터셋을 만들면 되겠죠?</p>\n<p>하지만 영어는 소문자도 있고 대문자도 있으니까 범위를 명확히 알기 위해서 이 대소문자의 charCode를 알아야할 것 같아요.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token string\">'a'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">97</span>\n\n<span class=\"token string\">'A'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">65</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>자, 다시 <code class=\"language-text\">charCodeAt</code> 메소드를 사용해서 숫자 코드를 보니 대문자 A는 65, 소문자 a는 97이 나왔네요? 그러면 범위를 대문자 A부터 시작해서 소문자 z까지로 잡으면 모든 알파벳을 포함할 수 있겠죠?</p>\n<p>이런 식으로요.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token string\">'Hi my name is Evan Moon.'</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[A-z]/g</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"H\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"m\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"y\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"m\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"E\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"v\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"M\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"o\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"o\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"n\"</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>자, 그런데 한 가지 문제가 있어요. 아까 컴퓨터는 문자를 인식하기 위해서 문자들이 담긴 테이블을 가지고 있잖아요? 그리고 대문자 A는 이 테이블에서 65번이라는 코드를 가지고 있고 소문자 a는 97이라는 숫자를 가지고 있어요.</p>\n<p>그런데 알파벳은 24글자잖아요? 65에다가 26을 더하면 얼마죠? 91이잖아요. 그런데 소문자 a는 97이라는 코드를 가지고 있습니다. 그 말인 즉슨 대문자 알파벳과 소문자 알파벳 사이에 알파벳이 아닌 다른 문자들이 등록이 되어있다는거에요. </p>\n<p>이 녀석들이 뭔지 한번 볼까요? </p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b94ae7ec-80e6-42ba-ac6c-9962d51c02b2/asciifull.gif\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b94ae7ec-80e6-42ba-ac6c-9962d51c02b2/asciifull.gif\"></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\">String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">91</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">\"[\"</span>\n\nString<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">92</span><span class=\"token punctuation\">)</span>\n\"\\\"\n\nString<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">93</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">\"]\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>자, 영어가 아닌 다른 녀석들이 나오고 있죠? 결국 91부터 96까지는 영어가 아닌 특수문자들이 등록이 되어있다는 겁니다. 그래서 그냥 <code class=\"language-text\">[A-z]</code> 로 범위를 지정해버리면 이 중간에 있는 이런 특수 문자들도 함께 캐릭터셋에 들어와버려요.</p>\n<p>실제로 이 <code class=\"language-text\">[A-z]</code> 정규식이 어떻게 작동하는지 눈으로 확인해보죠. 아까 우리가 작성했던 예문인 <code class=\"language-text\">&#39;Hi my name is Evan Moon.&#39;</code> 에 대괄호를 추가해도 패턴 매칭이 됩니다. 왜냐? 문자 코드 테이블에 등록된 대문자 A부터 소문자 z까지의 범위 안에 이 특수문자들도 포함이 되어있으니까요.</p>\n<p>그래서 정확히 알파벳만을 잡아내려면 범위를 대문자 따로 소문자 따로 지정을 해줘야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/[A-Za-z]/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이렇게요. 캐릭터셋에 포함하는 범위를 지정할 때는 이렇게 여러 개를 써도 상관이 없습니다.</p>\n<p>그리고 사실 이렇게 한 종류의 언어인데 쌩뚱맞게 중간에 다른 문자들이 들어가있는 케이스가 조금 특이한 케이스기는 해서 영어 알파벳을 제외하면 이런 경우가 많지는 않습니다.</p>\n<p>문제는 영어를 우리가 자주 쓰잖아요? 그래서 그냥  “아 영어 알파벳을 정규식 캐릭터셋으로 만들 때는 대문자 따로 소문자 따로 잡아야하는구나”라고 외우는 게 더 낫습니다.</p>","tableOfContents":"","fields":{"slug":"lecture.regex-tutorial.section2.8","lecture":"regex-tutorial","category":"content"},"frontmatter":{"title":"캐릭터셋 안에서 문자 범위 지정하기"}}},"pageContext":{"slug":"lecture.regex-tutorial.section2.8","previous":{"fields":{"slug":"lecture.regex-tutorial.section3.1","path":"/lectures/regex-tutorial/section3/1/"}},"next":{"fields":{"slug":"lecture.regex-tutorial.section1.1","path":"/lectures/regex-tutorial/section1/1/"}}}}}