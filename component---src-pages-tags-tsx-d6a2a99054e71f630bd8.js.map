{"version":3,"sources":["webpack:///./node_modules/@material-ui/core/esm/internal/svg-icons/Person.js","webpack:///./node_modules/@material-ui/core/esm/Avatar/Avatar.js","webpack:///./src/components/Cards/Widgets/Tags.tsx","webpack:///./src/hooks/useAllTags.ts","webpack:///./src/containers/TagsPage/index.tsx","webpack:///./src/pages/tags.tsx"],"names":["createSvgIcon","d","props","ref","alt","childrenProp","children","classes","className","_props$component","component","Component","imgProps","sizes","src","srcSet","_props$variant","variant","other","loaded","_ref","_React$useState","setLoaded","active","image","Image","onload","onerror","useLoaded","hasImg","hasImgNotFailing","img","Person","fallback","root","system","colorDefault","withStyles","theme","position","display","alignItems","justifyContent","flexShrink","width","height","fontFamily","typography","fontSize","pxToRem","lineHeight","borderRadius","overflow","userSelect","color","palette","background","backgroundColor","type","grey","circle","rounded","shape","square","textAlign","objectFit","textIndent","name","useStyles","makeStyles","spacing","nonDecorationText","textDecoration","chip","caption","marginRight","marginBottom","TagsCard","lang","onClick","styles","tags","allMarkdownRemark","group","filter","nodes","fields","length","map","fieldValue","totalCount","sort","a","b","getTagPath","usePageRouteUtils","title","key","to","Chip","size","label","avatar","logger","generateLogger","handleRecentPostClick","path","click","handleTagClick","tagName","TagsPage","useEffect","view","Layout","right","RecentPosts","SEO","Tags"],"mappings":"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","file":"component---src-pages-tags-tsx-d6a2a99054e71f630bd8.js","sourcesContent":["import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"\n}), 'Person');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Person from '../internal/svg-icons/Person';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      flexShrink: 0,\n      width: 40,\n      height: 40,\n      fontFamily: theme.typography.fontFamily,\n      fontSize: theme.typography.pxToRem(20),\n      lineHeight: 1,\n      borderRadius: '50%',\n      overflow: 'hidden',\n      userSelect: 'none'\n    },\n\n    /* Styles applied to the root element if not `src` or `srcSet`. */\n    colorDefault: {\n      color: theme.palette.background[\"default\"],\n      backgroundColor: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]\n    },\n\n    /* Styles applied to the root element if `variant=\"circle\"`. */\n    circle: {},\n\n    /* Styles applied to the root element if `variant=\"rounded\"`. */\n    rounded: {\n      borderRadius: theme.shape.borderRadius\n    },\n\n    /* Styles applied to the root element if `variant=\"square\"`. */\n    square: {\n      borderRadius: 0\n    },\n\n    /* Styles applied to the img element if either `src` or `srcSet` is defined. */\n    img: {\n      width: '100%',\n      height: '100%',\n      textAlign: 'center',\n      // Handle non-square image. The property isn't supported by IE 11.\n      objectFit: 'cover',\n      // Hide alt text.\n      color: 'transparent',\n      // Hide the image broken icon, only works on Chrome.\n      textIndent: 10000\n    },\n\n    /* Styles applied to the fallback icon */\n    fallback: {\n      width: '75%',\n      height: '75%'\n    }\n  };\n};\n\nfunction useLoaded(_ref) {\n  var src = _ref.src,\n      srcSet = _ref.srcSet;\n\n  var _React$useState = React.useState(false),\n      loaded = _React$useState[0],\n      setLoaded = _React$useState[1];\n\n  React.useEffect(function () {\n    if (!src && !srcSet) {\n      return undefined;\n    }\n\n    setLoaded(false);\n    var active = true;\n    var image = new Image();\n    image.src = src;\n    image.srcSet = srcSet;\n\n    image.onload = function () {\n      if (!active) {\n        return;\n      }\n\n      setLoaded('loaded');\n    };\n\n    image.onerror = function () {\n      if (!active) {\n        return;\n      }\n\n      setLoaded('error');\n    };\n\n    return function () {\n      active = false;\n    };\n  }, [src, srcSet]);\n  return loaded;\n}\n\nvar Avatar = React.forwardRef(function Avatar(props, ref) {\n  var alt = props.alt,\n      childrenProp = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      imgProps = props.imgProps,\n      sizes = props.sizes,\n      src = props.src,\n      srcSet = props.srcSet,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'circle' : _props$variant,\n      other = _objectWithoutProperties(props, [\"alt\", \"children\", \"classes\", \"className\", \"component\", \"imgProps\", \"sizes\", \"src\", \"srcSet\", \"variant\"]);\n\n  var children = null; // Use a hook instead of onError on the img element to support server-side rendering.\n\n  var loaded = useLoaded({\n    src: src,\n    srcSet: srcSet\n  });\n  var hasImg = src || srcSet;\n  var hasImgNotFailing = hasImg && loaded !== 'error';\n\n  if (hasImgNotFailing) {\n    children = /*#__PURE__*/React.createElement(\"img\", _extends({\n      alt: alt,\n      src: src,\n      srcSet: srcSet,\n      sizes: sizes,\n      className: classes.img\n    }, imgProps));\n  } else if (childrenProp != null) {\n    children = childrenProp;\n  } else if (hasImg && alt) {\n    children = alt[0];\n  } else {\n    children = /*#__PURE__*/React.createElement(Person, {\n      className: classes.fallback\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, classes.system, classes[variant], className, !hasImgNotFailing && classes.colorDefault),\n    ref: ref\n  }, other), children);\n});\nprocess.env.NODE_ENV !== \"production\" ? Avatar.propTypes = {\n  /**\n   * Used in combination with `src` or `srcSet` to\n   * provide an alt attribute for the rendered `img` element.\n   */\n  alt: PropTypes.string,\n\n  /**\n   * Used to render icon or text elements inside the Avatar if `src` is not set.\n   * This can be an element, or just a string.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Attributes applied to the `img` element if the component is used to display an image.\n   * It can be used to listen for the loading error event.\n   */\n  imgProps: PropTypes.object,\n\n  /**\n   * The `sizes` attribute for the `img` element.\n   */\n  sizes: PropTypes.string,\n\n  /**\n   * The `src` attribute for the `img` element.\n   */\n  src: PropTypes.string,\n\n  /**\n   * The `srcSet` attribute for the `img` element.\n   * Use this attribute for responsive image display.\n   */\n  srcSet: PropTypes.string,\n\n  /**\n   * The shape of the avatar.\n   */\n  variant: PropTypes.oneOf(['circle', 'rounded', 'square'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAvatar'\n})(Avatar);","import React from 'react';\nimport WidgetCard from 'components/Cards/Widgets';\nimport { Link } from 'gatsby';\nimport { Chip, Avatar, makeStyles, Theme } from '@material-ui/core';\nimport { useAllTags } from 'hooks/useAllTags';\nimport { usePageRouteUtils } from 'hooks/usePageRouteUtils';\n\nconst useStyles = makeStyles<Theme>(({ spacing, typography }) => ({\n  nonDecorationText: {\n    textDecoration: 'none',\n  },\n  chip: {\n    fontSize: typography.caption.fontSize,\n    marginRight: spacing(1),\n    marginBottom: spacing(1),\n  },\n}));\n\ninterface Props {\n  onClick?: (tag: string) => void;\n}\nconst TagsCard = ({ onClick }: Props) => {\n  const styles = useStyles();\n  const tags = useAllTags();\n  const { getTagPath } = usePageRouteUtils();\n\n  return (\n    <WidgetCard title=\"태그\">\n      {tags.map(({ fieldValue, totalCount }) => (\n        <Link key={fieldValue} to={getTagPath(fieldValue)} className={styles.nonDecorationText}>\n          <Chip\n            className={styles.chip}\n            size=\"small\"\n            label={fieldValue}\n            avatar={<Avatar>{totalCount}</Avatar>}\n            onClick={() => onClick?.(fieldValue)}\n          />\n        </Link>\n      ))}\n    </WidgetCard>\n  );\n};\n\nexport default TagsCard;\n","import { useStaticQuery, graphql } from 'gatsby';\nimport { GroupItem } from 'models/query';\nimport { SupportedLanguages } from 'models/site';\n\ninterface TagsQueryResult {\n  allMarkdownRemark: {\n    group: Array<GroupItem<{ fields: { lang: SupportedLanguages } }>>;\n  };\n}\nexport const useAllTags = (lang: SupportedLanguages = 'ko') => {\n  const {\n    allMarkdownRemark: { group },\n  } = useStaticQuery<TagsQueryResult>(graphql`\n    query {\n      allMarkdownRemark {\n        group(field: frontmatter___tags) {\n          fieldValue\n          totalCount\n          nodes {\n            fields {\n              lang\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const currentLanguageTags = group.filter(\n    ({ nodes }) => nodes.filter(({ fields }) => fields.lang === lang).length > 0\n  );\n\n  return currentLanguageTags\n    .map(({ fieldValue, totalCount }) => ({ fieldValue, totalCount }))\n    .sort((a, b) => b.totalCount - a.totalCount);\n};\n","import React, { useEffect } from 'react';\nimport Layout from 'components/Layout';\nimport SEO from 'components/SEO';\nimport TagsCard from 'components/Cards/Widgets/Tags';\nimport RecentPostsCard from 'components/Cards/Widgets/RecentPosts';\nimport { generateLogger } from 'utils/loggers';\n\nconst logger = generateLogger('tags_page');\nconst handleRecentPostClick = (path: string) => {\n  logger.click('click_recent_posting', { path });\n};\nconst handleTagClick = (tagName: string) => {\n  logger.click('click_tag', { tagName });\n};\n\nconst TagsPage = () => {\n  useEffect(() => {\n    logger.view();\n  }, []);\n\n  return (\n    <Layout right={<RecentPostsCard onClick={handleRecentPostClick} />}>\n      <SEO title=\"태그\" />\n      <TagsCard onClick={handleTagClick} />\n    </Layout>\n  );\n};\n\nexport default TagsPage;\n","import React from 'react';\nimport Page from 'containers/TagsPage';\nexport default () => <Page />;\n"],"sourceRoot":""}