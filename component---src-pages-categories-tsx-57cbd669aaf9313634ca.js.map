{"version":3,"sources":["webpack:///./src/components/Cards/Widgets/RecentPosts.tsx","webpack:///./src/containers/CategoriesPage/index.tsx","webpack:///./src/pages/categories.tsx","webpack:///./src/hooks/useAllCategories.ts","webpack:///./src/components/Items/SimplePostItem.tsx"],"names":["useStyles","makeStyles","wrapper","margin","padding","RecentPostsCard","onClick","styles","lang","useRecoilState","languageAtom","posts","useAllPosts","recent","useMemo","splice","handleRecentPostClick","useCallback","path","title","className","map","post","index","key","fields","thumbnail","frontmatter","childImageSharp","fixed","src","date","categories","logger","generateLogger","handleCategoryClick","categoryName","click","CategoriesPage","useEffect","view","Layout","right","RecentPosts","SEO","Categories","onClickCategory","useAllCategories","allMarkdownRemark","group","filter","nodes","length","fieldValue","totalCount","shape","palette","link","color","textDecoration","item","borderRadius","transition","backgroundColor","grey","width","height","SimplePostItem","category","join","to","container","spacing","xs","alt","gutterBottom","variant"],"mappings":"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","file":"component---src-pages-categories-tsx-57cbd669aaf9313634ca.js","sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport SimplePostItem from 'components/Items/SimplePostItem';\nimport WidgetCard from 'components/Cards/Widgets';\nimport { makeStyles } from '@material-ui/core';\nimport { useRecoilState } from 'recoil';\nimport { languageAtom } from 'atoms/language';\nimport { useAllPosts } from 'hooks/useAllPosts';\n\nconst MAX_POST_COUNT = 5;\nconst useStyles = makeStyles({\n  wrapper: {\n    margin: 0,\n    padding: 0,\n  },\n});\n\ninterface Props {\n  onClick?: (path: string) => void;\n}\nconst RecentPostsCard = ({ onClick }: Props) => {\n  const styles = useStyles();\n  const [lang] = useRecoilState(languageAtom);\n  const posts = useAllPosts(lang);\n\n  const recent = useMemo(() => {\n    return posts.splice(0, MAX_POST_COUNT);\n  }, [posts]);\n\n  const handleRecentPostClick = useCallback(\n    (path: string) => {\n      onClick?.(path);\n    },\n    [onClick]\n  );\n\n  return (\n    <WidgetCard title=\"최근 글\">\n      <ul className={styles.wrapper}>\n        {recent.map((post, index) => (\n          <SimplePostItem\n            key={post.fields.path ?? index}\n            thumbnail={post.frontmatter.thumbnail?.childImageSharp?.fixed?.src ?? ''}\n            title={post.frontmatter.title ?? ''}\n            date={post.frontmatter.date}\n            path={post.fields.path ?? '/'}\n            categories={post.frontmatter.categories}\n            onClick={() => handleRecentPostClick(post.fields.path)}\n          />\n        ))}\n      </ul>\n    </WidgetCard>\n  );\n};\n\nexport default RecentPostsCard;\n","import React, { useEffect } from 'react';\nimport Layout from 'components/Layout';\nimport SEO from 'components/SEO';\nimport CategoriesCard from 'components/Cards/Widgets/Categories';\nimport RecentPostsCard from 'components/Cards/Widgets/RecentPosts';\nimport { generateLogger } from 'utils/loggers';\n\nconst logger = generateLogger('categories_page');\nconst handleCategoryClick = (categoryName: string) => {\n  logger.click('click_category', { categoryName });\n};\nconst handleRecentPostClick = (path: string) => {\n  logger.click('click_recent_posting', { path });\n};\n\nconst CategoriesPage = () => {\n  useEffect(() => {\n    logger.view();\n  }, []);\n\n  return (\n    <Layout right={<RecentPostsCard onClick={handleRecentPostClick} />}>\n      <SEO title=\"카테고리\" />\n      <CategoriesCard onClickCategory={handleCategoryClick} />\n    </Layout>\n  );\n};\n\nexport default CategoriesPage;\n","import React from 'react';\nimport Page from 'containers/CategoriesPage';\nexport default () => <Page />;\n","import { useStaticQuery, graphql } from 'gatsby';\nimport { SupportedLanguages } from 'models/site';\nimport { GroupItem } from 'models/post';\n\ninterface CategoryQueryResult {\n  allMarkdownRemark: {\n    group: Array<GroupItem<{ fields: { lang: SupportedLanguages } }>>;\n  };\n}\nexport const useAllCategories = (lang: SupportedLanguages = 'ko') => {\n  const {\n    allMarkdownRemark: { group },\n  }: CategoryQueryResult = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark {\n        group(field: frontmatter___categories) {\n          fieldValue\n          totalCount\n          nodes {\n            fields {\n              lang\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  /** @TODO 현재 랭귀지에 속한 포스팅만 totalCount에 포함되도록 수정 */\n  const currentLanguegeCategories = group.filter(\n    ({ nodes }) => nodes.filter(({ fields }) => fields.lang === lang).length > 0\n  );\n\n  return currentLanguegeCategories.map(({ fieldValue, totalCount }) => ({ fieldValue, totalCount }));\n};\n","import React, { useMemo } from 'react';\nimport { Grid, Typography, makeStyles, Theme } from '@material-ui/core';\nimport { Link, graphql } from 'gatsby';\n\nconst useStyles = makeStyles<Theme>(({ shape, palette }) => ({\n  link: {\n    color: 'inherit',\n    textDecoration: 'none',\n  },\n  item: {\n    borderRadius: shape.borderRadius,\n    transition: 'background-color 0.3s ease-in-out',\n    '&:hover': {\n      backgroundColor: palette.grey['100'],\n    },\n  },\n  thumbnail: {\n    width: 64,\n    height: 64,\n    margin: 0,\n    borderRadius: shape.borderRadius,\n  },\n}));\n\ninterface Props {\n  thumbnail: string;\n  title: string;\n  path: string;\n  date?: string;\n  categories?: string[];\n  onClick?: (path: string) => void;\n}\nconst SimplePostItem = ({ thumbnail, title, path, date = '', categories = [], onClick }: Props) => {\n  const styles = useStyles();\n  const category = useMemo(() => {\n    if (categories != null) {\n      return categories.join('/');\n    } else {\n      return '';\n    }\n  }, [categories]);\n  return (\n    <Link to={path} className={styles.link}>\n      <Grid container spacing={2} onClick={() => onClick?.(path)} className={styles.item}>\n        <Grid item xs=\"auto\">\n          <img src={thumbnail} alt={title} title={title} className={styles.thumbnail} />\n        </Grid>\n        <Grid item xs={true}>\n          <Typography color=\"textSecondary\" gutterBottom variant=\"caption\">\n            {date}\n          </Typography>\n          <Typography variant=\"body2\">{title}</Typography>\n          <Typography color=\"textSecondary\" variant=\"caption\">\n            {category}\n          </Typography>\n        </Grid>\n      </Grid>\n    </Link>\n  );\n};\n\nexport default SimplePostItem;\n\nexport const query = graphql`\n  fragment SimplePostItemQuery on MarkdownRemark {\n    fields {\n      path\n      lang\n    }\n    frontmatter {\n      title\n      categories\n      date(formatString: \"YYYY-MM-DD\")\n      thumbnail {\n        childImageSharp {\n          fixed(width: 320, height: 320, quality: 100, cropFocus: CENTER) {\n            src\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}