{"componentChunkName":"component---src-templates-lecture-page-template-tsx","path":"/lectures/regex-tutorial/section2/7/","result":{"data":{"markdownRemark":{"id":"afcaf706-389d-5a14-9395-b114f42968e2","excerpt":"이번 강의에서는 커스텀한 나만의 캐릭터 클래스, 즉 문자열의 집합을 만드는 방법에 대해서 알아볼건데요. 결국 우리가 이전 강의들에서 배웠던 \\d나 \\w나 \\s 같은 캐릭터 클래스는 이미 정규식에서 정해놓은 문자들의 집합이라고 했었잖아요? 그런데 이런…","html":"<p>이번 강의에서는 커스텀한 나만의 캐릭터 클래스, 즉 문자열의 집합을 만드는 방법에 대해서 알아볼건데요.</p>\n<p>결국 우리가 이전 강의들에서 배웠던 \\d나 \\w나 \\s 같은 캐릭터 클래스는 이미 정규식에서 정해놓은 문자들의 집합이라고 했었잖아요?</p>\n<p>그런데 이런 경우도 있지 않을까요? “나는 0~9까지의 숫자를 뽑아내고 싶은게 아니라 0~5까지만 뽑아내고 싶어”</p>\n<p>혹은, 특수문자들의 집합 같은 것들을 표현하고 싶을 때. 이런 캐릭터 클래스는 정규식이 제공해주지 않잖아요? 그래서 이런 문제들을 해결하려면 우리가 직접 문자열의 집합을 만들어야합니다. 이런 커스텀한 집합을 정규식에서는 Character set이라고 부릅니다.</p>\n<p>Set이 집합이라는 의미니까 결국은 그냥 문자 집합인거죠.</p>\n<p>이런 캐릭터셋을 만드는 방법은 총 2가지가 있는데요.</p>\n<p>첫 번째는 “집합 안에 들어있는 녀석들을 찾아내겠다”라는 의미를 가지는 방법.</p>\n<p>그리고 두 번째는 “집합 안에 들어있는 녀석들이 아닌 녀석들을 찾아내겠다”라는 의미를 가진 방법이 있습니다.</p>\n<p>저희가 캐릭터 클래스를 사용할 때도 이렇게</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/\\d/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>를 쓰면 숫자 집합을 의미하는 것이고</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/\\D/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이렇게 대문자로 쓰면 숫자 집합이 아닌 녀석들을 찾겠다는 의미라고 했었잖아요? 결국 캐릭터셋도 캐릭터 클래스들과 마찬가지로 Positive와 Negative 두 가지의 의미를 만들 수 있어야 한다는 거에요.</p>\n<p>자, 일단 집합 안에 있는 문자들을 찾겠다는 의미인 Positive한 캐릭터셋을 표현해봅시다.</p>\n<p>캐릭터셋은 기본적으로 대괄호(<code class=\"language-text\">[</code>)를 사용하여 표현합니다. 이 대괄호 안에 내가 집합에 넣고싶은 문자들을 쭉 나열해주면 되는거에요.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/[0123456789]/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이런 식으로요. 결국 이 표현은 0, 1, 2, 3, 4, 5, 6, 7, 8, 9를 포함하는 하나의 집합을 선언한 거에요. 어? 이거 어디서 많이 본 집합이죠?</p>\n<p>결국 이 캐릭터셋은 <code class=\"language-text\">\\d</code> 캐릭터 클래스와 정확히 같은 집합입니다. 근데 매번 집합을 이렇게 캐릭터셋으로 정의하는게 너무 번거로우니까 <code class=\"language-text\">\\d</code>라는 캐릭터 클래스를 쓰는거에요.</p>\n<p>자 그럼 반대로 대문자 <code class=\"language-text\">\\D</code> 캐릭터 클래스처럼 숫자 집합이 아닌 녀석, 즉 0,1,2,3,4,5,6,7,8,9가 아닌 녀석들을 표현하는 캐릭터셋은 어떻게 만들면 될까요?</p>\n<p>간단합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/[^0123456789]/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이렇게 앞에 캐럿을 붙혀주시면 돼요. 이 캐럿이 우리가 일반적으로 프로그래밍 언어를 사용할 때 not의 의미로 쓰는 <code class=\"language-text\">!</code> 와 같은 역할을 합니다. 이렇게 붙혀주면 이제 이 캐릭터셋은 “이 집합에 포함되지 않은 문자”를 찾는 패턴이 되는거에요.</p>\n<p>(이거 PPT에 벤다이어그램 그려서 설명해야 좋을 듯)</p>\n<p>여기서 많은 분들이 헷갈리시는게</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/0123456789/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이 표현과 헷갈리십니다. 이 표현은 대괄호가 없죠? 그 말인 즉슨 그냥 문자열 내에서0, 1, 2, 3, 4, 5, 6, 7, 8, 9가 연속으로 나오는 문자열을 찾겠다는 의미인거에요. 즉, 0 뒤에는 반드시 1이 와야하고 1 뒤에는 반드시 2가 와야하고 이런 패턴입니다.</p>\n<p>저희 이전 강의에서 hello world로 여러 번 실습했었죠?</p>\n<p>자 근데, </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/[0123456789]/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이 표현은 0, 1, 2, 3, 4, 5, 6, 7, 8, 9가 연속으로 나오는 걸 찾겠다는 게 아니에요. 그냥 한 글자, 딱 한 글자와 매칭이 되는데, 이 한 글자가 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 중에 하나여야 한다는 의미인거에요. 그래서 이 표현은 0, 1, 2, 3, 4… 뭐 이런 식으로 순서대로 적혀있지만 사실 순서를 바꿔도 의미는 동일합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/[9876543210]/</span>\n<span class=\"token regex\">/[0123456789]/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>이렇게 순서를 바꿔써도 결국 0, 1, 2, 3, 4, 5, 6, 7, 8, 9를 포함하고 있는 집합이라는 의미는 동일하잖아요? 그래서 캐릭터셋 안에 들어가는 문자들은 순서의 영향이 전혀 없습니다.</p>\n<p>조금 더 이해를 돕기 위해서 다른 예제도 한번 볼게요. 이번에는 조금 더 복잡한 패턴을 한번 볼게요.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/[가1나2다3라4마5바6사]/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이 캐릭터셋이 표현하는 집합은 그냥 가나다라마바사 중간에 1,2,3,4,5,6을 끼워넣은 겁니다. 마찬가지로 이 캐릭터셋과</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/[가나다라마바사123456]/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이 캐릭터셋은 같은 의미에요. 그냥 가나다라마바사, 123456을 포함하고 있는 집합을 만든거니까요. 그래서 왠만하면 첫 번째 예시인 가1나2다3 이렇게 쓰는 것보다 사람이 조금 더 인지하기 쉽게 “가나다라마바사123456”처럼 같은 유형의 문자끼리 묶어주는 게 좋겠죠?</p>\n<p>자 그럼 이 정규식을 가지고 “가나다라마바사abcdefg” 라는 문자열에 매칭을 시켜보면 어떻게 될까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token string\">'가나다라마바사abcdefg'</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[가나다라마바사123456]/g</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"가\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"나\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"다\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"라\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"마\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"바\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"사\"</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>이 집합에 속해있는 “가나다라마바사1234567”에 해당되는 녀석들만 매칭이 되겠죠? 그럼 이제 여기서 대괄호를 제거하면 어떻게 될까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token string\">'가나다라마바사abcdefg'</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/가나다라마바사123456/g</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>아무것도 안 잡혀요. 왜냐면 이 표현은 어떤 문자열의 집합을 정의하는게 아니라 여기 써져있는 그대로 가나다라마바사123456이라는 문자열을 찾는거거든요.</p>\n<p>즉 “가” 뒤에 “나”가 오고, 다시 “나” 뒤에는 “다”가 오고 이런 패턴을 찾겠다는 건데, 가나다라마바사abcdefg라는 문자열에는 이런 패턴이 없잖아요? 그래서 아무것도 매칭이 안 되는 겁니다.</p>\n<p>하지만 대괄호로 감싸져있는 녀석들은 일종의 캐릭터 클래스처럼 문자들의 집합을 의미하게 됩니다. </p>\n<p>이렇게 정규식은 기호 하나로 의미가 완전히 달라지는 경우가 많기 때문에 대괄호, 괄호, 캐럿 같은 이런 특수문자들이 어떤 역할을 하는 지를 잘 모르고 있다면 이 정규식이 어떻게 작동할지 전혀 예상할 수가 없어요.</p>\n<p>다행히도 이런 특수한 기능을 하는 특수문자들이 그렇게 많은 것은 아니에요. 10개도 안 됩니다. 정규식의 이 괴랄한 문법때문에 가독성이 떨어져서 어려워보이기는 하지만 프로그래밍 언어를 배울 때에 비하면 공부해야할 양이 절반도 안 됩니다.</p>","tableOfContents":"","fields":{"slug":"lecture.regex-tutorial.section2.7","lecture":"regex-tutorial","category":"content"},"frontmatter":{"title":"커스텀 집합 만들기"}}},"pageContext":{"slug":"lecture.regex-tutorial.section2.7","previous":{"fields":{"slug":"lecture.regex-tutorial.section2","path":"/lectures/regex-tutorial/section2/"}},"next":{"fields":{"slug":"lecture.regex-tutorial.section2.6","path":"/lectures/regex-tutorial/section2/6/"}}}}}