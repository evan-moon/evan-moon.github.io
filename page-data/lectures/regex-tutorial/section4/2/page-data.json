{"componentChunkName":"component---src-templates-lecture-page-template-tsx","path":"/lectures/regex-tutorial/section4/2/","result":{"data":{"markdownRemark":{"id":"e6edec70-4694-556a-866c-db2f42a45f70","excerpt":"저번 강의에서 말씀드렸다시피 문자열이 가장 처음 시작하는 부분과 끝나는 부분은 문자열의 경계입니다. 조금 더 알아보기 쉽게 시각화해보자면 대충 이런 모양인거에요. 이 a라는 문자들 사이사이에 있는 이 부분이 바로 경계입니다. 비기닝 앵커는 이름 그대…","html":"<p>저번 강의에서 말씀드렸다시피 문자열이 가장 처음 시작하는 부분과 끝나는 부분은 문자열의 경계입니다.</p>\n<p>조금 더 알아보기 쉽게 시각화해보자면 대충 이런 모양인거에요.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">|a|a|a|a|</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이 a라는 문자들 사이사이에 있는 이 부분이 바로 경계입니다. 비기닝 앵커는 이름 그대로 문자열이 시작하는 부분인 가장 처음 경계를 찾는 것이고, 엔드 앵커는 문자열이 끝나는 부분인 가장 마지막 경계를 찾는거에요.</p>\n<p>자 먼저 비기닝 앵커부터 살펴볼까요? 비기닝 앵커는 캐럿(^)을 사용해서 표현할 수가 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/^./</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>자 우리가 예전에 배웠던 캐릭터셋의 not이라는 의미도 캐럿을 썼었죠? 이렇게요.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/[^.]/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>그래서 헷갈리실 수도 있는데, 같은 캐럿이라고 해도 캐릭터 셋 안에 위치한 캐럿과 바깥 쪽에 위치한 캐럿은 의미가 다릅니다. 그냥 완전 다른 의미인데 같은 문자를 쓰는 것 뿐이에요. 서로 아무 관계가 없으니 헷갈리시면 안 돼요.</p>\n<p>자, 다시 돌아와서 비기닝 앵커를 이렇게 찾고 싶은 패턴의 맨 앞에 위치시켜주면, “비기닝 앵커의 다음에 오는 문자로 시작하는 패턴”을 의미하게 됩니다.</p>\n<p>비기닝 앵커나 엔드 앵커를 사용할 때는 이 캐럿이 문자열의 경계를 의미한다는 사실을 잘 기억하고 있어야해요. 비기닝 앵커는 당연히 문자열이 시작하는 부분의 경계를 의미하니까 당연히 패턴의 가장 앞 쪽에 비기닝 앵커가 등장해야겠죠?</p>\n<p>결국 비기닝 앵커는 정보가 반드시 어떤 특정한 문자로 시작되어야 할 때 사용되는데요, 근데 생각보다 이런 정보를 찾아야하는 경우가 많지는 않아요. 뭐 예를 들면 이런 경우가 있겠죠?</p>\n<p>SVG 같은 거 써보신 분들은 알겠지만, SVG의 명령어들은 M, L, A와 같은 문자 뒤에 좌표가 따라 오는 포맷을 가지고 있어요. 이런 식으로요.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-html line-numbers\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span> <span class=\"token attr-name\">d</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>\n  M 0 0\n  L 100 0\n\tL 100 100\n\tL 0 100\n\tZ\n<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>이때 M, move는 렌더링 포인터를 옮기는 역할, L은 선을 긋는 역할, Z는 선이 시작된 점까지 일직선으로 선을 그어 패스를 마무리하는 역할을 맡고 있는데요. 이렇게 특정 문자로 시작하는 정보는 “이런 의미를 가지고 있다”라는 정보를 걸러내서 카테고라이징 할 때는 비기닝 앵커가 유용하게 쓰일 수 있겠죠?</p>\n<p>근데 솔직히 일반적으로 저희 같은 어플리케이션 개발자가 코딩을 할 때 이렇게까지 로우한 레벨의 정보처리를 하는 경우는 흔하지는 않은 것 같습니다. 그래서 사실 비기닝 앵커는 단독으로 쓰이기 보다 엔드앵커와 함께 쓰이는 경우가 더 많은 것 같아요.</p>\n<p>그래서 엔드 앵커까지 같이 알아보고 난 다음에 이 앵커들을 사용하는 방법에 대한 예시를 보도록 하겠습니다. 그럼 바로 엔드 앵커를 알아볼까요?</p>\n<p>자, 엔드 앵커는 이렇게 달러($) 기호로 표현할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/.$/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>비기닝 앵커와 반대로 엔드 앵커는 문자열이 끝나는 경계를 의미하기 때문에 패턴의 가장 마지막 부분에만 등장할 수 있습니다.</p>\n<p>자, 사실 비기닝 앵커와 엔드 앵커의 사용법은 이게 다에요. 굉장히 간단하죠? 하지만 여기서 여러분들이 주의해야 할 점이 하나 있습니다.</p>\n<p>만약 비기닝 앵커나 엔드 앵커를 이렇게 패턴의 중간에 위치시키면 어떻게 될까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/.^../</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>에러가 발생할까요? 애초에 비기닝 앵커는 문자열의 시작을 의미하는건데, 문자열의 시작 경계가 문자열 중간에 나타난다는 건 논리적으로 말이 안 되잖아요?</p>\n<p>하지만 이렇게 쓴다고 해서 에러가 발생하지는 않습니다. 그냥 논리적으로 말이 안 되는 아무것도 잡을 수 없는 패턴이 되는거에요.</p>\n<p>근데 정규식을 처음 배울 때는 이런 실수를 생각보다 많이 할 수도 있어요. 왜냐면 이렇게 쓴다고 해서 정규식 어떤 에러를 내거나 하는 것은 아니거든요. 그냥 스무스하게 들어갑니다.</p>\n<p>정규식은 기본적으로 프로그래밍 언어처럼 어떤 논리를 기반으로 풀어나가는 언어가 아니에요. 에러라는 건 결국 어떤 논리적인 흐름이 맞지 않아서 발생하는 건데, 정규식은 논리를 기반으로 풀어나가는 언어가 아니라 단순히 패턴 표현을 위한 언어다보니 논리 개념도 없고, 따라서 에러도 없습니다.</p>\n<p>이 정규식 표현들은 그냥 어떤 패턴을 표현하는 것 뿐입니다. 그래서 이렇게 문자열의 시작 경계가 문자열 중간에 나타나는 말이 안 되는 표현도 그대로 수용하는 거에요.</p>\n<p>그래서 여러분이 이런 말도 안되는 패턴을 사용하지 않으려면 이런 비기닝 앵커같은 녀석들이 뭘 의미하는지 정확히 알고 있어야합니다. </p>\n<p>자, 다시 돌아와서, 이렇게 비기닝 앵커와 엔드 앵커를 쭉 살펴보았는데요. 이 녀석들을 어떤 경우에 사용할 수 있을까요? 아까 이야기했듯이 비기닝 앵커와 엔드 앵커는 따로 쓰이기 보다는 둘이 함께 쓰이는 경우가 많은데요, 주로 시작하는 부분과 끝나는 부분이 명확해야하는 정보에 대해서 쓰입니다.</p>\n<p>예를 들면, 정확히 숫자 5자리여야하는 정보를 우리가 정규식을 사용해서 검수를 해야한다고 생각해봅시다. 간단하게 생각해보면, 이건 숫자라는 문자 집합이 5번 반복되는 형태이니까 우리가 저번 강의에서 배웠던 수량자를 사용하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/\\d{5}/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이렇게요. 하지만 여기에는 한가지 문제가 있습니다. 우리가 검수하려고 하는 정보는 정확하게 숫자 5자리여야하는데요. 한번 이 문자열을 정규식의 test 메소드를 통해 검수해볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/\\d{5}/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'5555'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>자, 우리가 원하는대로 4자리의 숫자로 구성된 문자열은 테스트를 통과하지 못했습니다. 그럼 5자리를 넘어가는 문자열도 한번 테스트해볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/\\d{5}/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'5555555555'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>어? 이번에는 true가 나왔네요? 우리가 원하는 동작은 이때도 false가 나와야하는데, 왜 true가 나왔을까요?</p>\n<p>왜냐하면 “숫자 5자리가 반복된다”라는 패턴은 이 문자열에도 존재하기 때문이에요. 한번 볼까요? (regexr에서 본다)</p>\n<p>자 보시면 여기가 이렇게 매칭이 되어있는 모습을 볼 수가 있죠? 결국 숫자 5자리라는 패턴은 숫자가 5자리가 넘어가는 문자열에도 포함되어 있는 패턴이에요.</p>\n<p>그래서 우리가 명확하게 숫자 5자리가 맞는지를 테스트하려면 “문자열이 시작되고 숫자 5개가 반복된 후 문자열이 종료된다”와 같이 명확하고 구체적인 표현을 해줘야하는거에요.</p>\n<p>이때 비기닝 앵커와 엔드 앵커를 사용해서 문자열이 시작하는 지점과 끝나는 지점을 명확하게 표현을 할 수 있게 되는겁니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/^\\d{5}$/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'55555555'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>자 여기까지 문자열의 처음과 끝의 경계를 잡아낼 수 있는 비기닝 앵커와 엔드 앵커에 대해서 알아보았는데요. 다음 강의에서는 문자와 문자, 혹은 단어 사이에 있는 경계를 잡아내는 앵커인 바운더리 앵커에 대해서 알아보도록 하겠습니다.</p>","tableOfContents":"","fields":{"slug":"lecture.regex-tutorial.section4.2","lecture":"regex-tutorial","category":"content"},"frontmatter":{"title":"문자열의 시작, 그리고 끝 찾아보기"}}},"pageContext":{"slug":"lecture.regex-tutorial.section4.2","previous":{"fields":{"slug":"lecture.regex-tutorial.section1.1","path":"/lectures/regex-tutorial/section1/1/"}},"next":{"fields":{"slug":"lecture.regex-tutorial.section4.1","path":"/lectures/regex-tutorial/section4/1/"}}}}}