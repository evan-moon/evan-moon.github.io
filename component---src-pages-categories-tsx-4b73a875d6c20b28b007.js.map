{"version":3,"sources":["webpack:///./src/containers/CategoriesPage/index.tsx","webpack:///./src/pages/categories.tsx","webpack:///./node_modules/@material-ui/core/esm/ListItemSecondaryAction/ListItemSecondaryAction.js","webpack:///./src/components/Cards/Widgets/Categories.tsx","webpack:///./src/hooks/useAllCategories.ts"],"names":["logger","generateLogger","handleCategoryClick","categoryName","click","handleRecentPostClick","path","CategoriesPage","useEffect","view","Layout","right","RecentPosts","onClick","SEO","title","Categories","onClickCategory","props","ref","classes","className","other","root","muiName","withStyles","position","top","transform","name","useStyles","makeStyles","theme","link","color","textDecoration","item","listStyle","padding","spacing","borderRadius","shape","overflow","chip","fontSize","height","backgroundColor","palette","grey","CategoriesCard","styles","categories","lang","allMarkdownRemark","group","filter","nodes","fields","length","map","fieldValue","totalCount","useAllCategories","useRecoilState","languageAtom","posts","useAllPosts","getCategoryPath","usePageRouteUtils","useCallback","category","List","component","dense","to","ListItem","button","ListItemText","Chip","label","size","index","key"],"mappings":"yLAOMA,EAASC,YAAe,mBACxBC,EAAsB,SAACC,GAC3BH,EAAOI,MAAM,iBAAkB,CAAED,kBAE7BE,EAAwB,SAACC,GAC7BN,EAAOI,MAAM,uBAAwB,CAAEE,UAgB1BC,EAbQ,WAKrB,OAJAC,qBAAU,WACRR,EAAOS,SACN,IAGD,kBAACC,EAAA,EAAD,CAAQC,MAAO,kBAACC,EAAA,EAAD,CAAiBC,QAASR,KACvC,kBAACS,EAAA,EAAD,CAAKC,MAAM,SACX,kBAACC,EAAA,EAAD,CAAgBC,gBAAiBf,MCrBxB,4BAAM,kBAAC,EAAD,Q,2MCiBjB,EAA0B,cAAiB,SAAiCgB,EAAOC,GACrF,IAAIC,EAAUF,EAAME,QAChBC,EAAYH,EAAMG,UAClBC,EAAQ,YAAyBJ,EAAO,CAAC,UAAW,cAExD,OAAoB,gBAAoB,MAAO,YAAS,CACtDG,UAAW,YAAKD,EAAQG,KAAMF,GAC9BF,IAAKA,GACJG,OAwBL,EAAwBE,QAAU,0BACnB,aAAAC,EAAA,GA9CK,CAElBF,KAAM,CACJG,SAAU,WACVf,MAAO,GACPgB,IAAK,MACLC,UAAW,qBAwCmB,CAChCC,KAAM,8BADO,CAEZ,G,wEC5CGC,EAAYC,aAAkB,SAAAC,GAAK,MAAK,CAC5CC,KAAM,CACJC,MAAO,UACPC,eAAgB,QAElBC,KAAM,CACJC,UAAW,OACXC,QAASN,EAAMO,QAAQ,GACvBC,aAAcR,EAAMS,MAAMD,aAAe,EACzCE,SAAU,UAEZC,KAAM,CACJH,aAAcR,EAAMS,MAAMD,aAC1BI,SAAU,SACVC,OAAQ,OACRP,QAAS,WACTQ,gBAAiBd,EAAMe,QAAQC,KAAK,UA+CzBC,IAxCQ,SAAC,GAA+B,IAA7BhC,EAA6B,EAA7BA,gBAClBiC,EAASpB,IAETqB,EC3BwB,SAACC,GAwB/B,YAxBmE,IAApCA,MAA2B,MAAS,OAEjEC,kBAAqBC,MAkBiBC,QACtC,qBAAGC,MAAkBD,QAAO,qBAAGE,OAAoBL,OAASA,KAAMM,OAAS,KAG5CC,KAAI,kBAAiC,CAAEC,WAAnC,EAAGA,WAA4CC,WAA/C,EAAeA,eDGjCC,CADJC,yBAAeC,KAFuB,IAI/CC,EAAQC,cACNC,EAAoBC,cAApBD,gBAEFjE,EAAsBmE,uBAC1B,SAACC,GACCrD,WAAkBqD,KAEpB,CAACrD,IAGH,OACE,kBAAC,IAAD,CAAYF,MAAM,QAChB,kBAACwD,EAAA,EAAD,CAAMC,UAAU,MAAMC,OAAO,GAC3B,kBAAC,OAAD,CAAMC,GAAG,IAAIrD,UAAW6B,EAAOjB,MAC7B,kBAAC0C,EAAA,EAAD,CAAUC,QAAM,EAACvD,UAAW6B,EAAOd,KAAMvB,QAAS,kBAAMX,EAAoB,QAC1E,kBAAC2E,EAAA,EAAD,WACA,kBAAC,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMzD,UAAW6B,EAAOP,KAAMoC,MAAOd,EAAMP,OAAQsB,KAAK,aAI7D7B,EAAWQ,KAAI,WAA6BsB,GAA7B,IAAGrB,EAAH,EAAGA,WAAYC,EAAf,EAAeA,WAAf,OACd,kBAAC,OAAD,CAAMqB,IAAKD,EAAOP,GAAIP,EAAgBP,GAAavC,UAAW6B,EAAOjB,MACnE,kBAAC0C,EAAA,EAAD,CAAUC,QAAM,EAACvD,UAAW6B,EAAOd,KAAMvB,QAAS,kBAAMX,EAAoB0D,KAC1E,kBAACiB,EAAA,EAAD,KAAejB,GACf,kBAAC,EAAD,KACE,kBAACkB,EAAA,EAAD,CAAMzD,UAAW6B,EAAOP,KAAMoC,MAAOlB,EAAYmB,KAAK,oB","file":"component---src-pages-categories-tsx-4b73a875d6c20b28b007.js","sourcesContent":["import React, { useEffect } from 'react';\nimport Layout from 'components/Layout';\nimport SEO from 'components/SEO';\nimport CategoriesCard from 'components/Cards/Widgets/Categories';\nimport RecentPostsCard from 'components/Cards/Widgets/RecentPosts';\nimport { generateLogger } from 'utils/loggers';\n\nconst logger = generateLogger('categories_page');\nconst handleCategoryClick = (categoryName: string) => {\n  logger.click('click_category', { categoryName });\n};\nconst handleRecentPostClick = (path: string) => {\n  logger.click('click_recent_posting', { path });\n};\n\nconst CategoriesPage = () => {\n  useEffect(() => {\n    logger.view();\n  }, []);\n\n  return (\n    <Layout right={<RecentPostsCard onClick={handleRecentPostClick} />}>\n      <SEO title=\"카테고리\" />\n      <CategoriesCard onClickCategory={handleCategoryClick} />\n    </Layout>\n  );\n};\n\nexport default CategoriesPage;\n","import React from 'react';\nimport Page from 'containers/CategoriesPage';\nexport default () => <Page />;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    position: 'absolute',\n    right: 16,\n    top: '50%',\n    transform: 'translateY(-50%)'\n  }\n};\n/**\n * Must be used as the last child of ListItem to function properly.\n */\n\nvar ListItemSecondaryAction = React.forwardRef(function ListItemSecondaryAction(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemSecondaryAction.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally an `IconButton` or selection control.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nListItemSecondaryAction.muiName = 'ListItemSecondaryAction';\nexport default withStyles(styles, {\n  name: 'MuiListItemSecondaryAction'\n})(ListItemSecondaryAction);","import React, { useCallback } from 'react';\nimport WidgetCard from 'components/Cards/Widgets';\nimport { Link } from 'gatsby';\nimport { Chip, List, ListItem, ListItemText, ListItemSecondaryAction, makeStyles, Theme } from '@material-ui/core';\nimport { useAllCategories } from 'hooks/useAllCategories';\nimport { useRecoilState } from 'recoil';\nimport { languageAtom } from 'atoms/language';\nimport { usePageRouteUtils } from 'hooks/usePageRouteUtils';\nimport { useAllPosts } from 'src/hooks/useAllPosts';\n\nconst useStyles = makeStyles<Theme>(theme => ({\n  link: {\n    color: 'inherit',\n    textDecoration: 'none',\n  },\n  item: {\n    listStyle: 'none',\n    padding: theme.spacing(1),\n    borderRadius: theme.shape.borderRadius / 2,\n    overflow: 'hidden',\n  },\n  chip: {\n    borderRadius: theme.shape.borderRadius,\n    fontSize: '0.6rem',\n    height: 'auto',\n    padding: '0.3rem 0',\n    backgroundColor: theme.palette.grey['200'],\n  },\n}));\n\ninterface Props {\n  onClickCategory?: (category: string) => void;\n}\nconst CategoriesCard = ({ onClickCategory }: Props) => {\n  const styles = useStyles();\n  const [lang] = useRecoilState(languageAtom);\n  const categories = useAllCategories(lang);\n  const posts = useAllPosts();\n  const { getCategoryPath } = usePageRouteUtils();\n\n  const handleCategoryClick = useCallback(\n    (category: string) => {\n      onClickCategory?.(category);\n    },\n    [onClickCategory]\n  );\n\n  return (\n    <WidgetCard title=\"카테고리\">\n      <List component=\"nav\" dense={true}>\n        <Link to=\"/\" className={styles.link}>\n          <ListItem button className={styles.item} onClick={() => handleCategoryClick('전체')}>\n            <ListItemText>전체</ListItemText>\n            <ListItemSecondaryAction>\n              <Chip className={styles.chip} label={posts.length} size=\"small\" />\n            </ListItemSecondaryAction>\n          </ListItem>\n        </Link>\n        {categories.map(({ fieldValue, totalCount }, index) => (\n          <Link key={index} to={getCategoryPath(fieldValue)} className={styles.link}>\n            <ListItem button className={styles.item} onClick={() => handleCategoryClick(fieldValue)}>\n              <ListItemText>{fieldValue}</ListItemText>\n              <ListItemSecondaryAction>\n                <Chip className={styles.chip} label={totalCount} size=\"small\" />\n              </ListItemSecondaryAction>\n            </ListItem>\n          </Link>\n        ))}\n      </List>\n    </WidgetCard>\n  );\n};\n\nexport default CategoriesCard;\n","import { useStaticQuery, graphql } from 'gatsby';\nimport { SupportedLanguages } from 'models/site';\nimport { GroupItem } from 'models/query';\n\ninterface CategoryQueryResult {\n  allMarkdownRemark: {\n    group: Array<GroupItem<{ fields: { lang: SupportedLanguages } }>>;\n  };\n}\nexport const useAllCategories = (lang: SupportedLanguages = 'ko') => {\n  const {\n    allMarkdownRemark: { group },\n  } = useStaticQuery<CategoryQueryResult>(graphql`\n    query {\n      allMarkdownRemark {\n        group(field: frontmatter___categories) {\n          fieldValue\n          totalCount\n          nodes {\n            fields {\n              lang\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  /** @TODO 현재 랭귀지에 속한 포스팅만 totalCount에 포함되도록 수정 */\n  const currentLanguegeCategories = group.filter(\n    ({ nodes }) => nodes.filter(({ fields }) => fields.lang === lang).length > 0\n  );\n\n  return currentLanguegeCategories.map(({ fieldValue, totalCount }) => ({ fieldValue, totalCount }));\n};\n"],"sourceRoot":""}