{"version":3,"sources":["webpack:///./src/pages/404.tsx","webpack:///./src/components/Cards/RecentPostsCard.tsx","webpack:///./src/hooks/useLocale.ts"],"names":["NotFoundPage","location","styles","makeStyles","status","textAlign","fontWeight","letterSpacing","centerStatusText","color","Colors","Primary","textAlignCenter","postCard","maxWidth","margin","title","className","variant","component","role","aria-label","display","justifyContent","flexDirection","css","gutterBottom","to","size","RecentPostsCard","lang","useContext","GlobalContext","edges","allMarkdownRemark","posts","useMemo","map","edge","node","filter","post","fields","splice","handleRecentPostClick","useCallback","url","linkEvent","WidgetCard","index","SimplePostItem","key","path","thumbnail","frontmatter","childImageSharp","fixed","src","date","categories","onClick"],"mappings":"kkBAkFeA,UArEM,SAAC,GAAwB,IAAtBC,EAAsB,EAAtBA,SAChBC,EAASC,YAAW,CACxBC,OAAQ,CACNC,UAAW,SACXC,WAAY,OACZC,cAAe,UAEjBC,iBAAkB,CAChBC,MAAOC,IAAOC,SAEhBC,gBAAiB,CACfP,UAAW,UAEbQ,SAAU,CACRC,SAAU,QACVC,OAAQ,WAdGZ,GAiBf,OACE,YAAC,IAAD,CAAQF,SAAUA,GAChB,YAAC,IAAD,CAAKe,MAAM,mBACX,YAAC,IAAD,KACE,YAAC,IAAD,CAAYC,UAAWf,EAAOE,OAAQc,QAAQ,MAA9C,IACG,oBAAMD,UAAWf,EAAOM,kBAAxB,KADH,KAGA,YAAC,IAAD,CAAYS,UAAWf,EAAOU,gBAAiBM,QAAQ,KAAKC,UAAU,MAAtE,cACc,IACZ,oBAAMC,KAAK,MAAMC,aAAW,OAA5B,WAKJ,YAAC,IAAD,CACEC,QAAQ,OACRC,eAAe,SACfC,cAAc,SACdC,IAAKA,YAAF,MAIH,YAAC,IAAD,CAAYR,UAAWf,EAAOU,gBAAiBM,QAAQ,YAAYQ,cAAY,GAA/E,qBAGA,YAAC,IAAD,CAAKT,UAAWf,EAAOW,UACrB,YAAC,IAAD,QAGJ,YAAC,IAAD,CACES,QAAQ,OACRC,eAAe,SACfE,IAAKA,YAAF,MAIH,YAAC,OAAD,CACEE,GAAG,IACHF,IAAKA,YAAF,MAIH,YAAC,IAAD,CAAQG,KAAK,QAAQV,QAAQ,YAAYT,MAAM,WAA/C,a,sSCXKoB,IAnDS,WACtB,IAAMC,ECRWC,qBAAWC,KAApBF,KDUeG,EAHK,OAG1BC,kBAAqBD,MAajBE,EAAgBC,mBAAQ,WAC5B,OAAOH,EACJI,KAAI,SAACC,GAAD,OAA0BA,EAAKC,QACnCC,QAAO,SAACC,GAAD,OAAgBA,EAAKC,OAAOZ,OAASA,KAC5Ca,OAAO,EArBS,KAsBlB,CAACV,EAAOH,IAELc,EAAwBC,uBAAY,SAACC,GACzCC,YAAUD,EAAK,gBACd,IAEH,OACE,YAACE,EAAA,EAAD,CAAYhC,MAAM,QAChB,kBACES,IAAKA,YAAF,MAKFU,EAAME,KAAI,SAACI,EAAMQ,GAAP,yBACT,YAACC,EAAA,EAAD,CACEC,IAAG,UAAEV,EAAKC,OAAOU,YAAd,QAAsBH,EACzBI,UAAS,oBAAEZ,EAAKa,YAAYD,iBAAnB,iBAAE,EAA4BE,uBAA9B,iBAAE,EAA6CC,aAA/C,aAAE,EAAoDC,WAAtD,QAA6D,GACtEzC,MAAK,UAAEyB,EAAKa,YAAYtC,aAAnB,QAA4B,GACjC0C,KAAMjB,EAAKa,YAAYI,KACvBN,KAAI,UAAEX,EAAKC,OAAOU,YAAd,QAAsB,IAC1BO,WAAYlB,EAAKa,YAAYK,WAC7BC,QAAShB,W","file":"component---src-pages-404-tsx-d3b5e7d10731c908dd33.js","sourcesContent":["/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport Layout from 'components/Layout/Base';\nimport SEO from 'components/SEO';\nimport { Typography, Box, makeStyles, Button } from '@material-ui/core';\nimport { Colors } from 'utils/colors';\nimport RecentPostsCard from 'components/Cards/RecentPostsCard';\nimport { Link } from 'gatsby';\n\ninterface Props {\n  location: Location;\n}\n\nconst NotFoundPage = ({ location }: Props) => {\n  const styles = makeStyles({\n    status: {\n      textAlign: 'center',\n      fontWeight: 'bold',\n      letterSpacing: '0.3rem',\n    },\n    centerStatusText: {\n      color: Colors.Primary,\n    },\n    textAlignCenter: {\n      textAlign: 'center',\n    },\n    postCard: {\n      maxWidth: '500px',\n      margin: '0 auto',\n    },\n  })();\n  return (\n    <Layout location={location}>\n      <SEO title=\"404: Not Found\" />\n      <Box>\n        <Typography className={styles.status} variant=\"h1\">\n          4<span className={styles.centerStatusText}>0</span>4\n        </Typography>\n        <Typography className={styles.textAlignCenter} variant=\"h4\" component=\"h2\">\n          길을 잃어버리셨어요!{' '}\n          <span role=\"img\" aria-label=\"아뿔싸\">\n            🤦‍♂️\n          </span>\n        </Typography>\n      </Box>\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        flexDirection=\"column\"\n        css={css`\n          margin-top: 4rem;\n        `}\n      >\n        <Typography className={styles.textAlignCenter} variant=\"subtitle2\" gutterBottom>\n          혹시 이런 포스트를 찾으시나요?\n        </Typography>\n        <Box className={styles.postCard}>\n          <RecentPostsCard />\n        </Box>\n      </Box>\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        css={css`\n          margin-top: 4rem;\n        `}\n      >\n        <Link\n          to=\"/\"\n          css={css`\n            text-decoration: none;\n          `}\n        >\n          <Button size=\"large\" variant=\"contained\" color=\"primary\">\n            메인으로\n          </Button>\n        </Link>\n      </Box>\n    </Layout>\n  );\n};\n\nexport default NotFoundPage;\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport SimplePostItem from 'components/Items/SimplePostItem';\nimport { Post } from 'models/post';\nimport WidgetCard from 'components/Cards/WidgetCard';\nimport { useCallback, useMemo } from 'react';\nimport { linkEvent } from 'utils/loggers';\nimport { useLocale } from 'hooks/useLocale';\n\nconst MAX_POST_COUNT = 5;\nconst RecentPostsCard = () => {\n  const lang = useLocale();\n  const {\n    allMarkdownRemark: { edges },\n  } = useStaticQuery(graphql`\n    query RecentPostsQuery {\n      allMarkdownRemark(limit: 20, sort: { order: DESC, fields: frontmatter___date }) {\n        edges {\n          node {\n            ...SimplePostItemQuery\n          }\n        }\n      }\n    }\n  `);\n\n  const posts: Post[] = useMemo(() => {\n    return edges\n      .map((edge: { node: Post }) => edge.node)\n      .filter((post: Post) => post.fields.lang === lang)\n      .splice(0, MAX_POST_COUNT);\n  }, [edges, lang]);\n\n  const handleRecentPostClick = useCallback((url: string) => {\n    linkEvent(url, '최근 글 링크 클릭');\n  }, []);\n\n  return (\n    <WidgetCard title=\"최근 글\">\n      <ul\n        css={css`\n          margin: 0;\n          padding: 0;\n        `}\n      >\n        {posts.map((post, index) => (\n          <SimplePostItem\n            key={post.fields.path ?? index}\n            thumbnail={post.frontmatter.thumbnail?.childImageSharp?.fixed?.src ?? ''}\n            title={post.frontmatter.title ?? ''}\n            date={post.frontmatter.date}\n            path={post.fields.path ?? '/'}\n            categories={post.frontmatter.categories}\n            onClick={handleRecentPostClick}\n          />\n        ))}\n      </ul>\n    </WidgetCard>\n  );\n};\n\nexport default RecentPostsCard;\n","import { useContext } from 'react';\nimport { GlobalContext } from 'stores';\n\nexport const useLocale = () => {\n  const { lang } = useContext(GlobalContext);\n  return lang;\n};\n"],"sourceRoot":""}