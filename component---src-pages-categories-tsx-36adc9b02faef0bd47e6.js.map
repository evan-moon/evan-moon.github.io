{"version":3,"sources":["webpack:///./src/components/Cards/Widgets/RecentPosts.tsx","webpack:///./node_modules/@material-ui/core/esm/Card/Card.js","webpack:///./src/containers/CategoriesPage/index.tsx","webpack:///./src/pages/categories.tsx","webpack:///./node_modules/@material-ui/core/esm/ListItemSecondaryAction/ListItemSecondaryAction.js","webpack:///./src/components/Cards/Widgets/Categories.tsx","webpack:///./node_modules/@material-ui/core/esm/CardHeader/CardHeader.js","webpack:///./src/components/Cards/Widgets/index.tsx","webpack:///./node_modules/@material-ui/core/esm/CardContent/CardContent.js","webpack:///./src/components/Items/SimplePostItem.tsx"],"names":["useStyles","makeStyles","wrapper","margin","padding","RecentPostsCard","onClick","styles","posts","useAllPosts","recent","useMemo","splice","handleRecentPostClick","useCallback","path","title","className","map","post","index","key","fields","thumbnail","frontmatter","childImageSharp","fixed","src","date","categories","Card","props","ref","classes","_props$raised","raised","other","root","elevation","overflow","name","logger","generateLogger","handleCategoryClick","categoryName","click","CategoriesPage","useEffect","view","Layout","right","RecentPosts","SEO","Categories","onClickCategory","muiName","withStyles","position","top","transform","theme","link","color","textDecoration","item","listStyle","spacing","borderRadius","shape","chip","fontSize","height","backgroundColor","palette","grey","CategoriesCard","lang","useRecoilState","languageAtom","useAllCategories","getCategoryPath","usePageRouteUtils","category","List","component","dense","to","ListItem","button","ListItemText","fieldValue","totalCount","Chip","label","size","action","avatar","_props$component","Component","_props$disableTypogra","disableTypography","subheaderProp","subheader","subheaderTypographyProps","titleProp","titleTypographyProps","type","Typography","variant","display","content","alignItems","flex","marginRight","alignSelf","marginTop","WidgetCard","children","CardContent","paddingBottom","transition","width","SimplePostItem","join","container","xs","alt","gutterBottom"],"mappings":"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","file":"component---src-pages-categories-tsx-36adc9b02faef0bd47e6.js","sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport SimplePostItem from 'components/Items/SimplePostItem';\nimport WidgetCard from 'components/Cards/Widgets';\nimport { makeStyles } from '@material-ui/core';\nimport { useAllPosts } from 'hooks/useAllPosts';\n\nconst MAX_POST_COUNT = 5;\nconst useStyles = makeStyles({\n  wrapper: {\n    margin: 0,\n    padding: 0,\n  },\n});\n\ninterface Props {\n  onClick?: (path: string) => void;\n}\nconst RecentPostsCard = ({ onClick }: Props) => {\n  const styles = useStyles();\n  const posts = useAllPosts();\n\n  const recent = useMemo(() => {\n    return posts.splice(0, MAX_POST_COUNT);\n  }, [posts]);\n\n  const handleRecentPostClick = useCallback(\n    (path: string) => {\n      onClick?.(path);\n    },\n    [onClick]\n  );\n\n  return (\n    <WidgetCard title=\"최근 글\">\n      <ul className={styles.wrapper}>\n        {recent.map((post, index) => (\n          <SimplePostItem\n            key={post.fields.path ?? index}\n            thumbnail={post.frontmatter.thumbnail?.childImageSharp?.fixed?.src ?? ''}\n            title={post.frontmatter.title ?? ''}\n            date={post.frontmatter.date}\n            path={post.fields.path ?? '/'}\n            categories={post.frontmatter.categories}\n            onClick={() => handleRecentPostClick(post.fields.path)}\n          />\n        ))}\n      </ul>\n    </WidgetCard>\n  );\n};\n\nexport default RecentPostsCard;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Paper from '../Paper';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    overflow: 'hidden'\n  }\n};\nvar Card = React.forwardRef(function Card(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$raised = props.raised,\n      raised = _props$raised === void 0 ? false : _props$raised,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"raised\"]);\n\n  return /*#__PURE__*/React.createElement(Paper, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : 1,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the card will use raised styling.\n   */\n  raised: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCard'\n})(Card);","import React, { useEffect } from 'react';\nimport Layout from 'components/Layout';\nimport SEO from 'components/SEO';\nimport CategoriesCard from 'components/Cards/Widgets/Categories';\nimport RecentPostsCard from 'components/Cards/Widgets/RecentPosts';\nimport { generateLogger } from 'utils/loggers';\n\nconst logger = generateLogger('categories_page');\nconst handleCategoryClick = (categoryName: string) => {\n  logger.click('click_category', { categoryName });\n};\nconst handleRecentPostClick = (path: string) => {\n  logger.click('click_recent_posting', { path });\n};\n\nconst CategoriesPage = () => {\n  useEffect(() => {\n    logger.view();\n  }, []);\n\n  return (\n    <Layout right={<RecentPostsCard onClick={handleRecentPostClick} />}>\n      <SEO title=\"카테고리\" />\n      <CategoriesCard onClickCategory={handleCategoryClick} />\n    </Layout>\n  );\n};\n\nexport default CategoriesPage;\n","import React from 'react';\nimport Page from 'containers/CategoriesPage';\nexport default () => <Page />;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    position: 'absolute',\n    right: 16,\n    top: '50%',\n    transform: 'translateY(-50%)'\n  }\n};\n/**\n * Must be used as the last child of ListItem to function properly.\n */\n\nvar ListItemSecondaryAction = React.forwardRef(function ListItemSecondaryAction(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemSecondaryAction.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally an `IconButton` or selection control.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nListItemSecondaryAction.muiName = 'ListItemSecondaryAction';\nexport default withStyles(styles, {\n  name: 'MuiListItemSecondaryAction'\n})(ListItemSecondaryAction);","import React, { useCallback } from 'react';\nimport WidgetCard from 'components/Cards/Widgets';\nimport { Link } from 'gatsby';\nimport { Chip, List, ListItem, ListItemText, ListItemSecondaryAction, makeStyles, Theme } from '@material-ui/core';\nimport { useAllCategories } from 'hooks/useAllCategories';\nimport { useRecoilState } from 'recoil';\nimport { languageAtom } from 'atoms/language';\nimport { usePageRouteUtils } from 'hooks/usePageRouteUtils';\n\nconst useStyles = makeStyles<Theme>(theme => ({\n  link: {\n    color: 'inherit',\n    textDecoration: 'none',\n  },\n  item: {\n    listStyle: 'none',\n    padding: theme.spacing(1),\n    borderRadius: theme.shape.borderRadius / 2,\n    overflow: 'hidden',\n  },\n  chip: {\n    borderRadius: theme.shape.borderRadius,\n    fontSize: '0.6rem',\n    height: 'auto',\n    padding: '0.3rem 0',\n    backgroundColor: theme.palette.grey['200'],\n  },\n}));\n\ninterface Props {\n  onClickCategory?: (category: string) => void;\n}\nconst CategoriesCard = ({ onClickCategory }: Props) => {\n  const styles = useStyles();\n  const [lang] = useRecoilState(languageAtom);\n  const categories = useAllCategories(lang);\n  const { getCategoryPath } = usePageRouteUtils();\n\n  const handleCategoryClick = useCallback(\n    (category: string) => {\n      onClickCategory?.(category);\n    },\n    [onClickCategory]\n  );\n\n  return (\n    <WidgetCard title=\"카테고리\">\n      <List component=\"nav\" dense={true}>\n        <Link to=\"/posts\" className={styles.link}>\n          <ListItem button className={styles.item} onClick={() => handleCategoryClick('전체')}>\n            <ListItemText>전체</ListItemText>\n          </ListItem>\n        </Link>\n        {categories.map(({ fieldValue, totalCount }, index) => (\n          <Link key={index} to={getCategoryPath(fieldValue)} className={styles.link}>\n            <ListItem button className={styles.item} onClick={() => handleCategoryClick(fieldValue)}>\n              <ListItemText>{fieldValue}</ListItemText>\n              <ListItemSecondaryAction>\n                <Chip className={styles.chip} label={totalCount} size=\"small\" />\n              </ListItemSecondaryAction>\n            </ListItem>\n          </Link>\n        ))}\n      </List>\n    </WidgetCard>\n  );\n};\n\nexport default CategoriesCard;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: 16\n  },\n\n  /* Styles applied to the avatar element. */\n  avatar: {\n    flex: '0 0 auto',\n    marginRight: 16\n  },\n\n  /* Styles applied to the action element. */\n  action: {\n    flex: '0 0 auto',\n    alignSelf: 'flex-start',\n    marginTop: -8,\n    marginRight: -8\n  },\n\n  /* Styles applied to the content wrapper element. */\n  content: {\n    flex: '1 1 auto'\n  },\n\n  /* Styles applied to the title Typography element. */\n  title: {},\n\n  /* Styles applied to the subheader Typography element. */\n  subheader: {}\n};\nvar CardHeader = React.forwardRef(function CardHeader(props, ref) {\n  var action = props.action,\n      avatar = props.avatar,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      subheaderProp = props.subheader,\n      subheaderTypographyProps = props.subheaderTypographyProps,\n      titleProp = props.title,\n      titleTypographyProps = props.titleTypographyProps,\n      other = _objectWithoutProperties(props, [\"action\", \"avatar\", \"classes\", \"className\", \"component\", \"disableTypography\", \"subheader\", \"subheaderTypographyProps\", \"title\", \"titleTypographyProps\"]);\n\n  var title = titleProp;\n\n  if (title != null && title.type !== Typography && !disableTypography) {\n    title = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: avatar ? 'body2' : 'h5',\n      className: classes.title,\n      component: \"span\",\n      display: \"block\"\n    }, titleTypographyProps), title);\n  }\n\n  var subheader = subheaderProp;\n\n  if (subheader != null && subheader.type !== Typography && !disableTypography) {\n    subheader = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: avatar ? 'body2' : 'body1',\n      className: classes.subheader,\n      color: \"textSecondary\",\n      component: \"span\",\n      display: \"block\"\n    }, subheaderTypographyProps), subheader);\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), avatar && /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.avatar\n  }, avatar), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.content\n  }, title, subheader), action && /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.action\n  }, action));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardHeader.propTypes = {\n  /**\n   * The action to display in the card header.\n   */\n  action: PropTypes.node,\n\n  /**\n   * The Avatar for the Card Header.\n   */\n  avatar: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, `subheader` and `title` won't be wrapped by a Typography component.\n   * This can be useful to render an alternative Typography variant by wrapping\n   * the `title` text, and optional `subheader` text\n   * with the Typography component.\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\n   * The content of the component.\n   */\n  subheader: PropTypes.node,\n\n  /**\n   * These props will be forwarded to the subheader\n   * (as long as disableTypography is not `true`).\n   */\n  subheaderTypographyProps: PropTypes.object,\n\n  /**\n   * The content of the Card Title.\n   */\n  title: PropTypes.node,\n\n  /**\n   * These props will be forwarded to the title\n   * (as long as disableTypography is not `true`).\n   */\n  titleTypographyProps: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardHeader'\n})(CardHeader);","import React, { ReactNode } from 'react';\nimport { Card, CardContent, CardHeader, Typography } from '@material-ui/core';\n\ninterface Props {\n  title?: string;\n  children: ReactNode;\n}\nconst WidgetCard = ({ title = '', children }: Props) => {\n  return (\n    <Card variant=\"outlined\">\n      <CardHeader\n        title={\n          <Typography variant=\"caption\" color=\"textSecondary\">\n            {title}\n          </Typography>\n        }\n      />\n      <CardContent>{children}</CardContent>\n    </Card>\n  );\n};\n\nexport default WidgetCard;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  }\n};\nvar CardContent = React.forwardRef(function CardContent(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardContent'\n})(CardContent);","import React, { useMemo } from 'react';\nimport { Grid, Typography, makeStyles, Theme } from '@material-ui/core';\nimport { Link, graphql } from 'gatsby';\n\nconst useStyles = makeStyles<Theme>(({ shape, palette }) => ({\n  link: {\n    color: 'inherit',\n    textDecoration: 'none',\n  },\n  item: {\n    borderRadius: shape.borderRadius,\n    transition: 'background-color 0.3s ease-in-out',\n    '&:hover': {\n      backgroundColor: palette.grey['100'],\n    },\n  },\n  thumbnail: {\n    width: 64,\n    height: 64,\n    margin: 0,\n    borderRadius: shape.borderRadius,\n  },\n}));\n\ninterface Props {\n  thumbnail: string;\n  title: string;\n  path: string;\n  date?: string;\n  categories?: string[];\n  onClick?: (path: string) => void;\n}\nconst SimplePostItem = ({ thumbnail, title, path, date = '', categories = [], onClick }: Props) => {\n  const styles = useStyles();\n  const category = useMemo(() => {\n    if (categories != null) {\n      return categories.join('/');\n    } else {\n      return '';\n    }\n  }, [categories]);\n  return (\n    <Link to={path} className={styles.link}>\n      <Grid container spacing={2} onClick={() => onClick?.(path)} className={styles.item}>\n        <Grid item xs=\"auto\">\n          <img src={thumbnail} alt={title} title={title} className={styles.thumbnail} />\n        </Grid>\n        <Grid item xs={true}>\n          <Typography color=\"textSecondary\" gutterBottom variant=\"caption\">\n            {date}\n          </Typography>\n          <Typography variant=\"body2\">{title}</Typography>\n          <Typography color=\"textSecondary\" variant=\"caption\">\n            {category}\n          </Typography>\n        </Grid>\n      </Grid>\n    </Link>\n  );\n};\n\nexport default SimplePostItem;\n\nexport const query = graphql`\n  fragment SimplePostItemQuery on MarkdownRemark {\n    fields {\n      path\n      lang\n    }\n    frontmatter {\n      title\n      categories\n      date(formatString: \"YYYY-MM-DD\")\n      thumbnail {\n        childImageSharp {\n          fixed(width: 320, height: 320, quality: 100, cropFocus: CENTER) {\n            src\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}