{"componentChunkName":"component---src-templates-lecture-page-template-tsx","path":"/lectures/regex-tutorial/section5/2/","result":{"data":{"markdownRemark":{"id":"2521abec-01ed-5d0e-8d11-a403a458fed5","excerpt":"자 이번 강의에서는 캡처 그룹의 기능 중 하나인 그룹핑 기능을 알아볼 건데요. 캡처링보다 그룹핑을 먼저 배워보는 이유는 그냥 캡처링보다 그룹핑이 더 이해하기가 쉬운 기능이라서에요. 그러니까 조금 쉬운 기능을 먼저 한번 배워보고 워밍업을 한 다음에, …","html":"<p>자 이번 강의에서는 캡처 그룹의 기능 중 하나인 그룹핑 기능을 알아볼 건데요. 캡처링보다 그룹핑을 먼저 배워보는 이유는 그냥 캡처링보다 그룹핑이 더 이해하기가 쉬운 기능이라서에요. 그러니까 조금 쉬운 기능을 먼저 한번 배워보고 워밍업을 한 다음에, 캡처링을 부셔볼 예정입니다.</p>\n<p>이전 강의에서 말씀드렸듯이 그룹핑은 어떤 패턴들을 하나로 묶어주는거에요. 이게 무슨 말일까요? 하나로 묶어준다.</p>\n<p>보통 저희가 자주 접하는 그룹핑을 한번 예시로 볼게요.</p>\n<p>(Google Presentation을 켠다)</p>\n<p>제가 생각했을 때 그룹핑이라는 개념을 저희가 가장 자주 접하는 곳은 바로 PPT라고 생각합니다. 대부분 살면서 PPT 한번씩은 만들어보잖아요? 대학교에서 과제를 하든 회사에서 프레젠테이션을 하든 일반적으로 한번씩은 경험해보는 것 같아요.</p>\n<p>자 근데 저희가 PPT 만들 때보면 기본적으로 제공되는 도형들이 동그라미, 네모, 세모 뭐 이런 애들 밖에 없잖아요? 근데 이런 기본적인 도형들을 가지고 우리같은 일반인이 막 감각적인 디자인을 할 수가 없어요. 이게 됐으면 디자이너 했겠지. 근데 저희는 일반인이잖아요?</p>\n<p>그래서 결국 어떻게 하죠? 여러가지 도형을 열심히 조합해서 최대한 이뻐보이게, 어떻게 좀 아이콘 비슷한 것도 만들어보고 일러스트 흉내도 내보고 하잖아요? 이렇게 여러가지 도형들을 합쳐서 뭔가 하나의 그럴싸한 걸 만들어서 PPT에 써먹죠.</p>\n<p>(간단한 얼굴 모양 이런 거 만들자)</p>\n<p>이렇게요. 귀엽죠?</p>\n<p>근데 이렇게 조합되어있는 도형들의 위치나 크기를 바꾸려고 하면 저희 어떻게 하죠? 각각의 도형을 저희가 일일히 하나씩 움직이지는 않잖아요?</p>\n<p>물론 한꺼번에 드래그로 잡아서 옮길 수도 있겠지만, 더 똑똑한 방법은 뭐죠? 얘네들을 그룹핑하는거잖아요?</p>\n<p>이렇게 그룹핑을 하면 이 여러 가지의 도형들이 마치 하나의 도형인 것처럼 움직이고 크기도 줄었다 커졌다 할 수 있겠죠?</p>\n<p>자, 결국 정규식에서의 그룹핑도 이거랑 완전 똑같아요. 이 동그라미들이 각각의 패턴이라고 생각하고 이 그룹핑 기능을 그냥 캡처 그룹을 사용해서 표현하는 것 뿐이에요. 그러면 여러 가지의 패턴들이 마치 하나의 패턴인 것처럼 인식되는거죠.</p>\n<p>자, 다시 돌아와서 방금 전에는 조금 시각적인 요소를 가지고 예시를 들었다면 이번에는 직접 캡처 그룹을 써보면서 이 기능을 이해해보도록 할게요.</p>\n<p>수량자를 한번 예로 들어볼게요. 수량자는 뭐였죠? 자기 앞에 등장한 패턴의 횟수를 세는 녀석이었잖아요?</p>\n<p>그러면 제가 만약에 이런 패턴을 작성하면 어떻게 될까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/Hello{3}/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>여기서 이 수량자, 3이라는 수량자가 횟수를 세고 있는 패턴은 뭘까요? Hello일까요?</p>\n<p>아니죠. o 겠죠. 왜냐면 수량자는 자기 바로 앞에 등장한 패턴의 횟수만 세거든요. 하단의 Tools를 보면 수량자가 o라는 문자 패턴 밑에 묶여있는 것을 볼 수가 있죠? 그래서 이 정규식은 전체적으로 hellooo라는 패턴을 표현하고 있는겁니다.</p>\n<p>근데 이럴 때가 또 있을 수 있잖아요? 나는 이 o를 세는게 아니라 Hello라는 패턴 전체가 3번 나오는 걸 표현하고 싶어…그럼 어떻게 해야할까요?</p>\n<p>수량자는 자기 앞에 등장한 패턴 하나만 세는 녀석이에요. 그럼 이 Hello라는 패턴 전체를 수량자가 셀 수 있게 마치 하나의 패턴인 것처럼 인식이 될 수 있도록 묶어줘야겠죠?</p>\n<p>바로 이런 상황일 때 캡처 그룹을 사용해서 이 패턴들을 그룹핑 해주는 겁니다. 여러 패턴을 마치 하나의 패턴인 것처럼 표현하고 싶을 때.</p>\n<p>이전 강의에서 여러 번 예시를 같이 봐서 아시겠지만, 캡처 그룹을 만드는 방법은 굉장히 간단해요. 그냥 그룹핑하기를 원하는 패턴들을 괄호로 묶어주면 돼요. 이렇게 괄호를 사용해서 묶어주면 H,e,l,l,o라는 패턴이 괄호 밖에서는 마치 하나의 패턴인 것처럼 인식이 되는겁니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/(Hello){3}/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>자, 그럼 이제 수량자가 어떤 패턴을 세고 있나 볼까요? 다시 하단의 Tools를 보면 수량자가 이 캡처 그룹 전체를 세고 있는 것을 볼 수 있죠? 아까는 이렇게 o 아래에 수량자가 위치해 있었는데, 캡처 그룹으로 묶어주고 난 뒤에는 이렇게 캡처 그룹 아래에 수량자가 위치해있잖아요?</p>\n<p>즉, 이렇게 그룹핑을 해주면 이 수량자는 이제 H,e,l,l,o가 연속으로 등장하는 이 전체 패턴의 횟수를 세게 되는거에요. 그러니까 이제 “o가 3번 등장한다”가 아니라 “H,e,l,l,o가 연속으로 3번 등장한다”가 되는거죠.</p>\n<p>여기서 제가 lo만 묶으면 Hel, 그리고 lololo 이렇게 등장하는 패턴을 표현하게 되겠죠?</p>\n<p>여기까지 이해되시죠?</p>\n<h3 id=\"or-기능\" style=\"position:relative;\">or 기능<a href=\"#or-%EA%B8%B0%EB%8A%A5\" aria-label=\"or 기능 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>그리고 캡처 그룹에는 한 가지 기능이 숨어있는데, 바로 캡처 그룹 안에서 or를 표현할 수 있는 기능입니다. 저희가 논리연산자 or를 어떤 의미로 사용하고 있는지는 다들 아실거라고 생각해요. “또는”을 의미하는거죠?</p>\n<p>A 또는 B, A가 나와도 ㅇㅋ, B가 나와도 ㅇㅋ라는 뜻이죠? 이 캡처 그룹 안에서도 이걸 똑같이 표현할 수 있습니다. 어떻게? 그냥 논리연산자 or를 써주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token function\">Hel</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">lo<span class=\"token operator\">|</span>aa</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>근데, 일반적으로 논리연산자 or는 <code class=\"language-text\">||</code> 이렇게 쓰잖아요? 근데 정규식에서는 짝대기 하나로만 표현을 합니다. 비트연산자의 or랑 똑같이 생겼어요.</p>\n<p>자 이렇게 캡처 그룹의 or 기능을 한번 사용해봤는데, 뭔가 이 밑에 매칭되는 부분은 변한게 없죠? 왜 그럴까요? 왜냐면 저 캡처 그룹의 의미가 (lo 또는 aa)가 연속으로 3번 등장이라는 의미이기 때문입니다.</p>\n<p>그래서 원래는 hel이 나오고 그 뒤로 lololo가 등장해야만 했었담녀 이제는 중간에 lo가 아니라 aa가 들어가도 매칭이 돼요.</p>\n<p>순서는 이렇게 바꿔줘도 다 매칭이 됩니다. 당연히 상관이 없겠죠? 이 캡처 그룹의 의미가 (lo 또는 aa)가 연속으로 3번 등장이라는 의미니까요. 그리고 여기에 제가 or <code class=\"language-text\">bb</code> 를 추가하면 어떻게 될까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token function\">Hel</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">lo<span class=\"token operator\">|</span>aa<span class=\"token operator\">|</span>bb</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>그러면 이제 이 패턴은 뭘 의미하는거죠? “lo 또는 aa 또는 bb가 3번 연속으로 등장”이라는 의미죠? 그래서 중간에 그냥 bb를 추가해도 패턴 매칭이 되는 모습을 볼 수가 있습니다.</p>\n<p>당연히 b 이렇게 하면 안 되겠죠? 저희가 캡처 그룹에 넣은 건 <code class=\"language-text\">bb</code> 라는 패턴이니까요. b가 연속으로 등장해야해요.</p>\n<h3 id=\"어디다가-쓰냐\" style=\"position:relative;\">어디다가 쓰냐?<a href=\"#%EC%96%B4%EB%94%94%EB%8B%A4%EA%B0%80-%EC%93%B0%EB%83%90\" aria-label=\"어디다가 쓰냐 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>자, 그럼 여기까지 일단 캡처 그룹의 그룹핑 기능을 한번 살펴봤습니다.</p>\n<p>근데 여러 개의 패턴을 하나로 묶을 수 있다는 건 알겠고, or을 써서 캡처 그룹 안에서 여러가지의 패턴이 나와도 상관없이 처리할 수 있다는 것도 알겠어. 근데 도대체 이 그룹핑이라는 기능은 어떨 때 사용해야 하는거냐? 결국 이게 중요하죠?</p>\n<p>한 마디로 얘기하자면 결국 어떤 복잡한 패턴을 단순하게 다루고 싶을 때 쓰는 거에요. 저희 아까 PPT에서의 그룹핑 기억나시죠? 여러가지 도형을 조합해서 엄청 복잡한 일러스트 같은 걸 만들었다고 해도 그룹핑을 하게되면 별 신경쓰지 않고 마치 하나의 도형인 것 처럼 컨트롤 할 수 있잖아요?</p>\n<p>그래서 일반적으로는 자기 앞에 등장하는 단 하나의 패턴의 횟수를 세는 이런 수량자같은 녀석들과 조합해서 많이 사용합니다. 사실 그냥 일하다보면 캡처 그룹이랑 조합되는 애가 거의 수량자 밖에 없는 것 같아요.</p>\n<p>그러면 이제 조금 실전에 가까운 예시를 볼까요?</p>\n<p>지금 바로 생각나는 예시는 URL이 있는데요. 일반적으로 저희가 사용하는 URL은 이런 구조를 가지고 있잖아요?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">https://google.com</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>프로토콜을 의미하는 맨 앞에 스킴필드, 그리고 그 뒤에 호스트가 따라오는 구조죠? 이게 구글의 URL을 의미하는 문자열입니다.</p>\n<p>자 근데, 이거 하나밖에 없을까요? 아니죠.</p>\n<p>일반적으로는 보안때문에 대부분 TLS를 사용하고 있지만, 가끔 사용하지 않는 곳도 있을 수 있어요. 그런 경우에는 스킴이 https가 아니라 http로 시작하기 때문에 이런 URL도 있을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">http://google.com</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>그리고 마지막으로 아예 스킴 필드를 생략하는 경우도 있죠. 이렇게요.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">google.com</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>결국 이렇게 모양은 조금씩 다르지만 이 문자열들이 의미하는 것이 “구글닷컴이다”라는 것은 변하지 않습니다.</p>\n<p>그래서 우리가 구글의 URL을 정규식으로 잡아내고 싶다면, 우리는 이 맨 앞에 있는 <code class=\"language-text\">http</code> 혹은 <code class=\"language-text\">https</code> 부분이 있을 수도 있고 없을 수도 있다는 것을 정규식으로 표현을 해줘야해요.</p>\n<p>그래서 이런 경우에는 이 http 혹은 https를 의미하는 패턴을 묶은 다음에 수량자를 사용해서 횟수를 세줘야겠죠? 왜냐하면 저희 h 따로 t 따로 p 따로 이렇게 세고 싶은게 아니잖아요? 반드시 http 혹은 https 라는 패턴이 등장하는지 아닌지를 알고 싶은 겁니다.</p>\n<p>그러면 맨 앞에 프로토콜이 있는 부분의 패턴부터 한번 표현을 해볼게요.</p>\n<p>일단 https 또는 http니까 이렇게 캡처 그룹의 그룹핑 기능을 사용해서 표현해줄 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/(http:\\/\\/|https:\\/\\/)/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>자 여기서 or 연산자 등장했죠? 왜냐면 http일수도 있고 https일수도 있으니까요. 이해되시죠?</p>\n<p>그리고 이 캡처 그룹으로 묶인 패턴들이 있을 수도 있고, 없을 수도 있잖아요? 그냥 <code class=\"language-text\">[google.com](http://google.com)</code> 인 경우도 처리해줘야겠죠?</p>\n<p>그래서 있을 수도 있고 없을 수도 있다는 의미의 수량자를 사용해줄건데요. 자, 등장하지 않거나 등장하거나를 의미하는 수량자는 뭐였죠? 옵셔널 수량자였죠? 그리고 옵셔널 수량자는 어떻게 썼었죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/(http:\\/\\/|https:\\/\\/)?/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이렇게 물음표를 사용해서 옵셔널 수량자를 표현할 수 있죠? 그 다음에는 그냥 뒤에 구글 닷컴을 적어주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/(http:\\/\\/|https:\\/\\/)?google\\.com/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>자, 이렇게 구글닷컴을 잡아낼 수 있는 정규식 표현을 작성해봤는데요. 그럼 이제 이게 진짜 제대로 작동하는지 테스트를 한번 돌려볼까요?</p>\n<p><code class=\"language-text\">[http://google.com](http://google.com)</code> 은 통과합니다. 그리고 <code class=\"language-text\">[https://google.com](https://google.com)</code> 도…통과합니다.</p>\n<p>그리고 그냥 <code class=\"language-text\">google.com</code>도 통과하겠죠?</p>\n<p>그럼 이제 worst 케이스를 한번 써볼까요?</p>\n<p><code class=\"language-text\">ht://[google.com](http://google.com)</code> …통과하네요? 그러면 아무거나 막치고 <code class=\"language-text\">google.com</code> … 통과하네요?</p>\n<p>자, 당황스러운 결과가 나왔죠? 이론적으로는 완벽한데…동작이 이상하잖아요 지금? 여기서 굉장히 논리적으로 생각을 해야됩니다…컴퓨터는 절대 거짓말 하지 않아요. 다 사람 잘못입니다.</p>\n<p>이게 왜 이러는 걸까요?</p>\n<p>왜냐하면 <code class=\"language-text\">ht://google.com</code> 이나, 이 막치고 그냥 <code class=\"language-text\">google.com</code>도 중간부터 <code class=\"language-text\">google.com</code>이라는 문자열은 존재하잖아요? 그쵸?</p>\n<p>근데 저희가 작성한 패턴의 의미는 뭐였죠? http나 https가 있거나 없거나. 그 뒤에 <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>이 따라오는 거. 그러면 결국 이 요상한 URL들 google.com 이라는 문자열이 포함되어있기 때문에 그냥 http나 https가 없는 그냥 google.com 케이스랑 똑같이 평가되는거에요.</p>\n<p>이럴때는 어떻게 하면 된다 그랬죠? 정규식 상에서 문자열의 시작이 어딘지, 그리고 끝이 어딘지 명확하게 표현해주면 된다고 했었죠? 이렇게 비기닝 앵커와 엔드 앵커를 사용해서 패턴을 정리해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/^(http:\\/\\/|https:\\/\\/)?google\\.com$/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이러면 이제 http로 시작하거나 https로 시작하거나 혹은 아예 없이 google.com으로 시작하거나 하는 경우만 이 정규식의 테스트를 통과할 수가 있겠죠? 이게 저희의 원래 의도였죠?</p>\n<p>자, 그룹핑은 결국 이렇게 복잡한 패턴을 묶어서 횟수를 세거나, 아니면 내가 원하는 위치에 여러 개의 패턴이 등장할 수 있는 상황일 때 많이 사용돼요. 방금 봤던 http 또는 https라는 표현을 잡아내고 싶을 때 처럼요.</p>\n<p>자 그럼 여기까지 캡처 그룹의 첫 번째 기능인 그룹핑에 대해서 알아보았습니다. 이제 다음 강의에서는 캡처 그룹의 두 번째 기능인 캡처링에 대해서 한번 같이 알아보도록 하겠습니다.</p>","tableOfContents":"<ul>\n<li><a href=\"#or-%EA%B8%B0%EB%8A%A5\">or 기능</a></li>\n<li><a href=\"#%EC%96%B4%EB%94%94%EB%8B%A4%EA%B0%80-%EC%93%B0%EB%83%90\">어디다가 쓰냐?</a></li>\n</ul>","fields":{"slug":"lecture.regex-tutorial.section5.2","lecture":"regex-tutorial","category":"content"},"frontmatter":{"title":"복잡한 패턴을 마치 하나처럼 만들어보는 그룹핑"}}},"pageContext":{"slug":"lecture.regex-tutorial.section5.2","previous":null,"next":{"fields":{"slug":"lecture.regex-tutorial.section3.3","path":"/lectures/regex-tutorial/section3/3/"}}}}}