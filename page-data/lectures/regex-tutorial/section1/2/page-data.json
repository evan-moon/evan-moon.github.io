{"componentChunkName":"component---src-templates-lecture-page-template-tsx","path":"/lectures/regex-tutorial/section1/2/","result":{"data":{"markdownRemark":{"id":"04daca39-eef0-5018-99fa-8940ab502e68","excerpt":"https://regexr.com/ https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c9fec35a-805b-4401-9747-4a4e2beb8947/_2020-12-24__4.17.53(2…","html":"<p><a href=\"https://regexr.com/\" target=\"_blank\" rel=\"nofollow\">https://regexr.com/</a></p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c9fec35a-805b-4401-9747-4a4e2beb8947/_2020-12-24__4.17.53(2).png\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c9fec35a-805b-4401-9747-4a4e2beb8947/_2020-12-24__4.17.53(2).png\"></p>\n<p>본격적인 정규식 강의에 들어가기에 앞서, 정규식을 작성할 때 유용하게 사용할 수 있는 사이트를 하나 소개해드리려고 합니다.</p>\n<p>바로 regexr이라는 온라인 툴인데요. regexr은 내가 작성한 정규식이 예제 문자열 중에서 어떤 부분들과 매칭될 수 있는지 바로바로 실시간으로 보여주는 툴이에요.</p>\n<p>앞으로 진행되는 강의들에서는 직접 자바스크립트 내에서 정규식을 작성하는 것 외에도 이 regexr라는 온라인 툴을 사용해서 강의를 진행할 예정이기 때문이라 이렇게 한 섹션을 통해서 이 툴의 사용법에 대한 이야기를 잠깐 해보려고 합니다.</p>\n<p>사실 이 툴의 UX는 꽤나 직관적인 편이라서 굳이 제가 설명하지 않아도 몇 번 만지다보면 대충 감을 잡으실 수 있을 것이라고 생각하는데요.</p>\n<p>일단 상단에 있는 Expression이라는 부분이 정규식을 입력하는 부분이구요. 이 곳에 이렇게 정규식을 입력하게 되면 하단에 있는 예제 문자열 중 제가 작성한 정규식과 매칭되는 부분만을 파랗게 표시해서 보여줍니다.</p>\n<p>그리고 맨 밑 쪽의 Tools 섹션을 보면 이 정규식이 어떤 의미를 가지고 있는지에 대한 간단한 설명을 보여주고 있습니다.</p>\n<p>설명을 읽어보면 <code class=\"language-text\">A-Z</code> 범위. A부터 Z까지 범위를 선택한다고 되어있네요. 그리고 Case sensitive라고 적혀있기 때문에 이 표현식이 대소문자를 구분한다는 사실까지도 친절하게 알려줍니다. 즉 대괄호 안 쪽에 위치한 <code class=\"language-text\">A-Z</code>라는 표현식은 대문자 A부터 Z까지의 범위에 해당하는 집합에 속한 문자열을 의미하는 표현이라고 볼 수 있어요.</p>\n<p>그리고 그 밑에를 보면 <code class=\"language-text\">\\w</code> 에 대한 설명으로 Word를 매칭하는 표현이라고 적혀있는데, 이 워드 문자는 alphanumeric, 즉, 알파벳과 숫자, 그리고 언더스코어라고 적혀있네요.</p>\n<p>그리고 이 워드 문자에 대한 수량자로 Quantifier, 앞에 오는 토큰, 즉 문자를 1개 또는 그 이상 매칭한다고 되어있습니다. 그래서 이 2개를 합쳐보면 결국 “워드 문자가 1개 이상 존재한다” 라는 의미가 되는 것이죠.</p>\n<p>이 의미들을 전부 합쳐보면 결국 이 정규식은 “하나의 영어 대문자 뒤로 영어나 숫자가 1개 이상 따라오는 패턴”을 의미하는데요, 하단의 예제 문자열을 보면 모두 대문자로 시작하고 그 뒤로 영어가 붙어 있는 문자열들이 선택된 것을 볼 수 있습니다.</p>\n<p>그리고 방금 이야기했듯이 <code class=\"language-text\">\\w</code> 라는 캐릭터 클래스는 alphanumeric, 영어와 숫자, 그리고 언더스코어를 모두 포괄하는 집합을 의미하기 때문에 뒤에 숫자나 언더스코어가 붙어도 같이 매칭이 돼요. (선택된 곳 아무데나 숫자나 언더스코어를 붙혀본다)</p>\n<p>하지만, 특수문자 같은 경우는 워드 문자가 아니죠. 워드 문자는 영어, 숫자, 언더스코어만 포함하는 집합이니까요. 그래서 특수문자 같은 경우는 이 정규식으로는 매칭할 수 없습니다. (선택된 곳 아무데나 특수문자를 붙혀본다)</p>\n<p>이렇게 regexr는 우리가 작성한 정규식이 문자열 중 어떤 부분에 적용되는지 실시간으로 확인할 수 있도록 도와주기도 하고 이렇게 시각화도 이쁘게 해주는데다가, 내가 작성한 정규식이 어떤 규칙을 가지고 있는지 설명까지 해주기 때문에 정규식을 처음 시작하면서 이것저것 연습해 볼 때도 유용하고, 그냥 실무에서 내가 작성한 정규식이 맞는지 틀린지 파악할 때도 편리하게 사용할 수 있어요.</p>\n<p>뭐, 그냥 코드 실행해보면 내가 작성한 정규식이 맞는지 틀린지 알 수 있지 않냐고 하실 수도 있는데, 일단 기본적으로 정규식은 잘못 작성한다고 해서 어떤 에러가 나는 게 아닙니다. 만약에 제가 문자열 중에서 숫자만 매칭하고 싶은데 영어를 매칭하는 정규식으로 잘못 작성했다고 해도, 그냥 이 문자열에 매칭되는 패턴이 정규식 안에 없을 뿐이지 논리적으로는 아무 문제가 없어요.</p>\n<p>그렇기 때문에 정규식에 잘못된 표현을 사용했다고 해도 에러가 나거나 그러진 않습니다. 그래서 한번 틀리면 어디가 잘못된 건지 찾기가 상당히 힘들어요. 이게 이 예제처럼 간단한 정규식이면 금방 찾을 수 있겠는데, 보통 회원가입할 때 이메일 검증하는 것 같이 비즈니스 로직에 포함된 정규식을 작성할 때는 이것보다 정규식 자체가 훨씬 길어지기 때문에 내가 하나하나 읽으면서 눈으로 틀린 부분을 직접 찾는 것은 상당히 힘들고 어렵습니다.</p>\n<p>이거는 뭐 훈련하고 말고 정규식에 익숙하네 안 하네 그런거랑 상관없이 그냥 힘들어요. 그래서 그럴 때는 그냥 이 regexr 툴에 그냥 입력해보고, 밑에 나온 Tools 설명보면서 조금씩 수정하면 굉장히 편하게 문제를 해결할 수 있습니다.</p>\n<p>여기까지가 기본적인  regexr 툴에 대한 사용법이구요. 왼쪽의 Aside 메뉴에 있는 것들은 대부분 이 툴이 제공해주는 정규식에 대한 꿀팁들이에요.</p>\n<p>그래서 여기 보면 치트시트도 있고, 레퍼런스도 있고 뭐가 많은데, 사실 뭐 레퍼런스같은 거 들어가보시면 알겠지만 설명이 이게 답니다. 그래서 처음 정규식을 접하시는 분들은 그냥 이걸 보고 외울 수 밖에 없고, 이해를 하기에는 설명이 많이 빈약합니다.</p>\n<p>그래서 제가 생각하기에는 그냥 “내가 어느 정도 정규식을 쓸 줄 아는데, 뭐 하나가 기억이 안나” 이런 경우에는 조금 유용한데, 초보자들한테 이걸 보고 정규식을 공부하라는 건 조금 잔인한 소리가 아닌가…하는 생각을 합니다. 아 물론 이게 부실하다 의미없다 이런 얘기는 아니고 그냥 설명이 초보자가 보기에는 조금 불친절하다…는 이야기에요.</p>","tableOfContents":"","fields":{"slug":"lecture.regex-tutorial.section1.2","lecture":"regex-tutorial","category":"content"},"frontmatter":{"title":"regexr 사이트 이용하기"}}},"pageContext":{"slug":"lecture.regex-tutorial.section1.2","previous":{"fields":{"slug":"lecture.regex-tutorial.section1","path":"/lectures/regex-tutorial/section1/"}},"next":{"fields":{"slug":"lecture.regex-tutorial","path":"/lectures/regex-tutorial/"}}}}}