{"componentChunkName":"component---src-templates-lecture-page-template-tsx","path":"/lectures/regex-tutorial/section4/1/","result":{"data":{"markdownRemark":{"id":"191e1ad7-09bb-543d-a91d-768959422602","excerpt":"지금까지 우리는 캐릭터 클래스, 캐릭터 셋, 수량자 등 문자와 관련된 패턴들에 대한 기능들을 한번 쭉 흝어봤는데요.  이번 섹션에서는 문자가 아닌 문자의 경계를 의미하는 패턴에 대해서 알아보려고 합니다. 정규식은 내가 원하는 문자를 찾을 수 있는 도…","html":"<p>지금까지 우리는 캐릭터 클래스, 캐릭터 셋, 수량자 등 문자와 관련된 패턴들에 대한 기능들을 한번 쭉 흝어봤는데요.  이번 섹션에서는 문자가 아닌 문자의 경계를 의미하는 패턴에 대해서 알아보려고 합니다.</p>\n<p>정규식은 내가 원하는 문자를 찾을 수 있는 도구라고 생각했는데, 문자의 경계라는게 도대체 뭐고, 문자의 경계를 찾아야 하는 이유가 뭘까요?</p>\n<p>문자의 경계라는 건 크게 생각해보면 문자와 문자 사이의 경계도 있겠지만, 문자열이 처음 시작하는 부분도 경계고, 문자열이 끝나는 부분도 경계입니다.</p>\n<p>그래서 결국 “a로 시작하는 문자열”, “원으로 끝나는 문자열” 같은 녀석들을 찾으려면 문자열이 끝나는 부분이 어딘지, 시작하는 부분이 어딘지 띄어쓰기가 있는 부분이 어딘지를 의미하는 문자의 경계를 찾아야 하는 거에요.</p>\n<p>자, 본격적인 강의에 들어가기에 앞서서 간단하게 예시를 몇 가지 볼게요.</p>\n<p>여기 URL이 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token string\">'evan-moon.github.io'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>URL이라는 건 규칙이 명확하게 정해져있는 정보죠? 만약에 이 중에서 맨 뒤에 위치한 저 <code class=\"language-text\">io</code>나 <code class=\"language-text\">com</code> , <code class=\"language-text\">org</code> 같은 도메인 레벨 정보를 가져오고 싶다면 어떻게 해야 할까요?</p>\n<p>정규식을 사용하여 내가 원하는 정보를 가져오고 싶을 때는 이 정보가 어떤 패턴을 가지고 있는지 생각해보는게 제일 중요해요.</p>\n<p>도메인 레벨 정보는 공통적으로 <code class=\"language-text\">.</code> 뒤에 바로 따라오는 2글자나 3글자의 영어 소문자 알파벳이라는 패턴을 가지고 있죠?</p>\n<p>그러면 이런 느낌으로 정규식 작성을 해볼 수 있을 것 같아요</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token string\">'evan-moon.github.io'</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\.[a-z]{2,3}/g</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>지금 이 정규식 표현에 사용된 기능들은 우리가 앞선 강의에서 한번씩 다 다뤄본 녀석들이니까 이제 어느 정도 이해가 되실거라고 생각해요.</p>\n<p>이 표현은 맨 앞에 <code class=\"language-text\">.</code> 이라는 문자가 하나 등장하고 그 뒤로, 영어 알파벳 소문자가 2개나 3개 등장하는 패턴을 찾겠다는 거죠?</p>\n<p>자 이제 결과를 볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token punctuation\">[</span><span class=\"token string\">\".git\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".io\"</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>막상 돌려보니까 저희가 원하는 도메인 레벨 부분도 제대로 매칭이 되기는 했는데, 전혀 의도하지 않았던 앞 쪽의 이 <code class=\"language-text\">.git</code> 부분의 문자들도 매칭이 되었죠?</p>\n<p>조금만 생각해보면 이게 당연한게, 저희가 작성했던 정규식 표현이 뭐였죠?</p>\n<p> <code class=\"language-text\">.</code> 이라는 문자가 하나 등장하고 그 뒤로, 영어 알파벳이 소문자가 2개나 3개 등장하는 패턴이었잖아요?</p>\n<p>물론 도메인 부분의 <code class=\"language-text\">.io</code> 부분도 이 패턴을 만족하지만, 앞쪽의 <code class=\"language-text\">.git</code> 도 이 패턴을 만족합니다. 앞에 <code class=\"language-text\">.</code> 이 하나 나오고 뒤에 영어 소문자가 2글자나 3글자가 나오잖아요?</p>\n<p>그래서 이런 상황일 때는 우리가 “문자열의 맨 끝에 있는 것만” 이라는 조건을 추가적으로 명시를 해줘야하는거에요.</p>\n<p>결국 이 조건을 작성하려면 문자열의 맨 끝, 즉 경계를 표현할 수 있는 방법이 필요한 거죠. 그리고 이렇게 경계를 표현할 수 있는 특수한 문자들을 우리는 앵커라고 부릅니다.</p>\n<p>앵커는 한국말로 번역하면 갈고리잖아요. 갈고리가 어떻게 생겼죠? (갈고리 그림) 요렇게 생겼잖아요.</p>\n<p>이걸 던졌을 때 어딘가에 챡 걸려야할텐데, 아무런 틈도 없고 매끈매끈한데다가 던져봤자 절대 안 걸리겠죠. 결국 갈고리는 어떤 물체의 틈이나 경계에 거는 물건입니다.</p>\n<p>그래서 이 문자열의 경계를 찾아내는 기능의 이름이 앵커인거에요. 이렇게 얘기하니까 조금 이해되죠?</p>\n<p>자 어쨌든 지금 이 상황에서는 문자열의 맨 끝 경계를 의미하는 end anchor를 사용해서 문제를 해결할 수 있어요.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token string\">'evan-moon.github.io'</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\.[a-z]{2,3}$/g</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>그냥 맨 뒤에 end anchor를 의미하는 달러 기호를 붙혀주면 됩니다. 자 그러면 이제 앞 쪽에 있던 <code class=\"language-text\">.git</code>  부분은 패턴 매칭이 더 이상 되지 않죠.</p>\n<p>왜냐하면 이 정규식은 이제</p>\n<p><code class=\"language-text\">.</code> 이라는 문자 뒤에 영어 소문자가 2글자가 3글자가 따라오고 그 뒤로 문자열의 맨 끝 경계가 나오는 패턴을 찾게 되었기 떄문인거죠. <code class=\"language-text\">.git</code> 은 문자열의 중간에 위치해있기 때문에 문자열의 맨 끝 경계가 이 문자열 뒤에 따라올 수가 없죠? 그래서 이 부분은 더 이상 매칭이 되지 않는 겁니다.</p>\n<p>자 이제 앵커를 본격적으로 배워보기전에 이 앵커를 어떤 상황에서 사용하는지, 그리고 왜 써야하는지에 대한 내용을 한번 훑어봤습니다.</p>\n<p>그럼 다음 강의에서는 문자열의 시작과 끝을 의미하는 beginning 앵커와, end 앵커에 대한 내용을 배워보도록 할게요.</p>","tableOfContents":"","fields":{"slug":"lecture.regex-tutorial.section4.1","lecture":"regex-tutorial","category":"content"},"frontmatter":{"title":"앵커란 무엇인가요?"}}},"pageContext":{"slug":"lecture.regex-tutorial.section4.1","previous":{"fields":{"slug":"lecture.regex-tutorial.section4.2","path":"/lectures/regex-tutorial/section4/2/"}},"next":{"fields":{"slug":"lecture.regex-tutorial.section3","path":"/lectures/regex-tutorial/section3/"}}}}}