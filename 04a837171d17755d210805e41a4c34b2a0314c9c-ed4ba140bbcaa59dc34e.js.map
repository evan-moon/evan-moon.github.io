{"version":3,"sources":["webpack:///./src/hooks/useAllPosts.ts"],"names":["useAllPosts","ignoreLanguage","lang","useRecoilState","languageAtom","allMarkdownRemark","edges","map","node","filter","p","fields"],"mappings":"qKAKaA,EAAc,SAACC,QAA0B,IAA1BA,OAAiB,GAAS,IAC7CC,EAAQC,yBAAeC,KADsB,GAkBpD,OAhBa,OAYqBC,kBAAkBC,MACjDC,KAAI,qBAAGC,QACPC,QAAO,SAACC,GAAD,OAAcT,GAAiBS,EAAEC,OAAOT,OAASA,O","file":"04a837171d17755d210805e41a4c34b2a0314c9c-ed4ba140bbcaa59dc34e.js","sourcesContent":["import { useStaticQuery, graphql } from 'gatsby';\nimport { Post } from 'models/post';\nimport { useRecoilState } from 'recoil';\nimport { languageAtom } from 'atoms/language';\n\nexport const useAllPosts = (ignoreLanguage = true) => {\n  const [lang] = useRecoilState(languageAtom);\n  const data = useStaticQuery(graphql`\n    query AllPostsQuery {\n      allMarkdownRemark(sort: { fields: frontmatter___date, order: DESC }) {\n        edges {\n          node {\n            ...PostQueryFragment\n          }\n        }\n      }\n    }\n  `);\n\n  const frontmatters: Post[] = data.allMarkdownRemark.edges\n    .map(({ node }: { node: Post }) => node)\n    .filter((p: Post) => (ignoreLanguage ? p.fields.lang === lang : true));\n\n  return frontmatters;\n};\n"],"sourceRoot":""}