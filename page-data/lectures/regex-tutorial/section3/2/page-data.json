{"componentChunkName":"component---src-templates-lecture-page-template-tsx","path":"/lectures/regex-tutorial/section3/2/","result":{"data":{"markdownRemark":{"id":"26fb694d-9118-58ca-9549-c06498e743e4","excerpt":"이번 강의에서는 자신의 앞에 나타나는 패턴의 횟수를 표현할 수 있는 명시적으로 표현할 수 있는 수량자에 대해서 알아보겠습니다. 이 수량자는 그냥 횟수를 명시하는 것라 이해하기가 그렇게 어렵지는 않을 거에요. 자 일단 한번 예시를 볼까요? 여기 무작위…","html":"<p>이번 강의에서는 자신의 앞에 나타나는 패턴의 횟수를 표현할 수 있는 명시적으로 표현할 수 있는 수량자에 대해서 알아보겠습니다.</p>\n<p>이 수량자는 그냥 횟수를 명시하는 것라 이해하기가 그렇게 어렵지는 않을 거에요.</p>\n<p>자 일단 한번 예시를 볼까요? 여기 무작위로 막 적은 문자열이 있습니다.</p>\n<p>만약 우리가 이 문자열을 4개의 문자를 묶어서 패턴 매칭을 하고 싶으면 어떻게 하면 될까요? 이전 강의에서 한번 등장했었죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token string\">'lkjaskfjiow21rjflkasnf'</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/.{4}/g</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"lkja\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"skfj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"iow2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1rjf\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lkas\"</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>이렇게 브라켓 안에 반복되는 횟수를 의미하는 숫자를 적어주면 됩니다.</p>\n<p>즉, 이 표현은 수량자 앞쪽에 위치한  <code class=\"language-text\">.</code> 캐릭터 클래스가 4번 반복되는 패턴을 의미합니다. 그래서 앞에서 부터 lkja…skfj 뭐 이런 식으로 문자 4개씩 매칭이 되고 있는 것이죠.</p>\n<p>여기까진 간단하죠? 그렇다면 이렇게 패턴의 반복 횟수를 명확하게 명시해야하는 경우, 뭐가 있을까요?</p>\n<p>이 수량자가 진짜 빛을 발하는 순간은 각 필드가 나누어져있고, 그 필드의 글자 수가 정해져있는 정보의 패턴을 매칭하려고 할 때 인데요.</p>\n<p>예를 들어 전화번호를 한번 볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token string\">'010-0101-0101'</span>\n<span class=\"token string\">'02-0101-0101'</span>\n<span class=\"token string\">'031-010-0101'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>대한민국의 전화번호는 대부분 이런 모양을 하고 있는데요. 핸드폰 번호같은 경우 반드시 맨 앞에 3자리의 통신사 식별번호가 위치하고 그 뒤에는 4자리의 전화번호 필드가 두 번 반복되는 형태를 가지죠?</p>\n<p>그리고 유선전화 같은 경우는 2자리나 3자리의 지역번호 뒤로 3자리, 또는 4자리의 필드와 4자리의 필드가 반복되는 형태를 가집니다.</p>\n<p>즉, 필드가 명확하게 나누어져 있고 그 필드에 들어가는 정보의 길이도 제한되어있죠?</p>\n<p>이런 경우에 각 필드의 길이나 필드 안에 숫자가 아닌 다른 문자가 포함되어있는지를 일일히 코딩하면 밸리데이팅하려고 하면 굉장히 번거로워요.</p>\n<p>지금 대충 한번 짜볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">isValidPhoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> fields <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> fields<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">3</span>\n    <span class=\"token operator\">&amp;&amp;</span> fields<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">field</span> <span class=\"token operator\">=></span> field<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">3</span> <span class=\"token operator\">||</span> field<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&amp;&amp;</span> fields<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">field</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isValidPhoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token string\">'010-4755-6185'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>작성한 <code class=\"language-text\">isValidPhoneNumber</code> 함수를 보면 문자열의 각 필드의 개수도 세고, 필드를 쭉 돌면서 해당 필드가 3자리인지 4자리인지도 검사하고, 해당 필드가 넘버형이 맞는지도 검사하고… </p>\n<p>그리고 대충 짜서 여기에는 없긴한데, 원래는 각 필드의 자리수도 첫 번째 필드는 무조건 3자리기 때문에 원래는 필드마다 이 예외처리도 다르게 해줘야해요.</p>\n<p>대충만 짰는데도 꽤 장황하죠?</p>\n<p>이런 경우에 정규식의 수량자를 사용하면 간단하게 문제를 해결할 수가 있습니다. </p>\n<p>자 한번 핸드폰 번호만 예시로 볼까요?</p>\n<p>(설명하며 정규식을 직접 작성한다)</p>\n<p>핸드폰 번호는 첫 번째 자리에 통신사 식별번호인 010, 그리고 요즘에는 많이 없긴 하지만 011, 016, 017, 018, 019 같은 숫자들이 위치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/^01[0|1|6|7|8|9]/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>모두 앞 쪽의 01까지는 동일하고 맨 마지막 숫자만 달라지기 떄문에 이건 캐릭터셋을 사용하여 0,1,6,7,8,9의 문자열 집합을 선언하도록 할게요.</p>\n<p>그리고 필드 구분자로 대시가 오죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/^01[0|1|6|7|8|9]-/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>그리고 두 번째 필드는 3자리 또는 4자리의 숫자가 위치합니다. 이때 수량자의 범위 지정 기능을 사용하면 3~4번의 반복을 표현할 수가 있어요</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/^01[0|1|6|7|8|9]-\\d{3,4}/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>수량자에 하나의 숫자만 넘기면 정확히 n번 반복되는 패턴을 의미하지만, 이렇게 콤마로 구분된 두 개의 숫자를 넘기면 n 이상 m이하의 범위 지정이 가능합니다. 이 필드는 3자리나 4자리의 숫자가 위치하기 때문에 이렇게 범위를 지정해줘야해요.</p>\n<p>유의하셔야할 점은 이게 콤마 때문에 헷갈릴 수 있는데, 3 또는 4가 아닙니다. 3이상 4이하에요. 애초에 이 수량자에는 숫자를 두 개 이상 쓸 수도 없습니다. 이 점 헷갈리시면 안 돼요.</p>\n<p>그리고 다시 필드 구분자인 대시가 들어옵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/^01[0|1|6|7|8|9]-\\d{3,4}-/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>그리고 마지막 필드는 4자리의 숫자가 위치하겠죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/^01[0|1|6|8|9]-\\d{3,4}-\\d{4}$/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이 맨 끝에랑 맨 앞에 붙은 애들은 앵커라는 녀석들인데, 간단하게만 얘기하면 문자열의 시작과 끝을 표현하는 녀석들이에요. 이것도 이후 강의에서 자세히 다룰 예정이니까 지금은 신경 안 쓰셔도 돼요. 수량자에만 집중을 해봅시다.</p>\n<p>자, 그러면 지금 결과만 보면 어느 정도 잘 돌아가는 것 같은데, 이게 진짜 제대로 작동하는 정규식인지, 한번 regexr의 Tests 기능을 사용해서 핸드폰 번호를 제대로 판별할 수 있는지 보도록 할게요.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token regex\">/^01[0|1|6|8|9]-\\d{3,4}-\\d{4}$/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'010-0101-0101'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>보시는 바와 같이 휴대폰 번호에 대한 패턴을 정규식을 통해 명확하게 표현해주었기 때문에 이 패턴과 어긋난 정보가 들어오면 test를 통과하지 못하는 것을 볼 수 있습니다.</p>\n<p>그리고 이 test 기능은 regexr이 만든게 아니라 사실 자바스크립트의 정규식 객체가 가지고 있는 <code class=\"language-text\">test</code> 메소드로 동일하게 사용할 수 있어요.</p>\n<p>(개발자 콘솔열고 보여줌)</p>\n<p>자, 다시 돌아와서 이런 정보가 전화 번호만 있을까요? 아니죠.</p>\n<p>주민등록번호도 앞에는 생년월일을 의미하는 6자리의 숫자, 그리고 뒤에는 출생지역과 순번을 의미하는 7자리의 숫자로 이루어져있고, 어…그리고 카드 번호도 보통은 4자리의 숫자가 4번 반복되는 필드를 가진 정보죠. 뭐 아멕스 카드나 다이너스 카드는 조금 다르긴 한데, 일반적으로는 16자리라고 봐도 무방합니다.</p>\n<p>이런 정보들의 특징은 어떤 문자나 패턴이 정해져있는 횟수 만큼 n번 반복한다는 거에요. 이럴 때 수량자를 사용하면 이 반복되는 정보들을 잡아낼 수가 있는 것이죠.</p>\n<p>자, 그럼 여기까지  패턴이 반복되는 횟수를 명확히 명시하는 수량자에 대해서 알아보았습니다. 다음 강의에서는 횟수를 명확히 명시하는 것이 아니라 n번 이상과 같이 조금 더 추상적인 수량을 표시하는 수량자에 대해서 알아보도록 하겠습니다.</p>","tableOfContents":"","fields":{"slug":"lecture.regex-tutorial.section3.2","lecture":"regex-tutorial","category":"content"},"frontmatter":{"title":"특정 횟수만 등장하는 패턴을 찾기"}}},"pageContext":{"slug":"lecture.regex-tutorial.section3.2","previous":{"fields":{"slug":"lecture.regex-tutorial.section3","path":"/lectures/regex-tutorial/section3/"}},"next":{"fields":{"slug":"lecture.regex-tutorial.section2","path":"/lectures/regex-tutorial/section2/"}}}}}