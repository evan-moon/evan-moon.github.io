{"componentChunkName":"component---src-templates-lecture-page-template-tsx","path":"/lectures/regex-tutorial/section2/4/","result":{"data":{"markdownRemark":{"id":"63c134aa-ad4c-5512-9eff-dae77c53c1ef","excerpt":"이번 강의에서는 정규식의 캐릭터 클래스 중 숫자를 의미하는  캐릭터 클래스에 대해서 알아볼건데요. 이전 강의에서 말씀드렸다시피 이런 캐릭터 클래스들은 일종의 축약어 형태로 표현되어있기 때문에 이 축약어들의 의미를 모르고 보면 조금 난해하다고 느낄 수…","html":"<p>이번 강의에서는 정규식의 캐릭터 클래스 중 숫자를 의미하는 <code class=\"language-text\">\\d</code> 캐릭터 클래스에 대해서 알아볼건데요.</p>\n<p>이전 강의에서 말씀드렸다시피 이런 캐릭터 클래스들은 일종의 축약어 형태로 표현되어있기 때문에 이 축약어들의 의미를 모르고 보면 조금 난해하다고 느낄 수가 있어요.</p>\n<p>근데 사실 의미를 알고 나면 별로 어렵지 않습니다.</p>\n<p><code class=\"language-text\">\\d</code> 캐릭터 클래스에 들어가는 <code class=\"language-text\">d</code>라는 글자는 <code class=\"language-text\">Digit</code> 이라는 단어의 축약어인데요, 말 그대로 “숫자”를 의미합니다.</p>\n<p>그리고 앞에 역슬래쉬가 붙는 이유는 이게 그냥 문자 <code class=\"language-text\">d</code>가 아니라 캐릭터 클래스 <code class=\"language-text\">d</code>라는 걸 표현하는거에요.</p>\n<p>이전 강의에서 그냥 정규식에 문자를 입력해서 내가 원하는 문자를 찾는 방법을 배웠었죠? 그래서 그냥 <code class=\"language-text\">d</code>라고만 입력하면 정규식은 <code class=\"language-text\">d</code>라는 글자를 찾아요. 그래서 역슬래쉬를 앞에 붙혀서 이게 그냥 문자 <code class=\"language-text\">d</code> 가 아니라 캐릭터 클래스 <code class=\"language-text\">d</code>라는 것을 명시해줘야하는거에요.</p>\n<p>그럼 일반적으로 우리가 자주 사용하는 숫자인 핸드폰번호를 한번 예시로 볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">010-1111-1111</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>보통 어플리케이션 내에서 핸드폰번호를 사용자들에게 입력받을 때, <code class=\"language-text\">-</code>(대시)를 제거하고 입력하게 만들기도 하지만, 사실 이렇게 필드가 명확히 구분되어있는 정보인데다가 일상 속에서도 이런 필드 구분을 자주 하고 있는 정보 같은 경우에는 어플리케이션내에서 정보를 입력받을 때도 동일한 필드 구분을 해주는 것이 사람들이 정보를 인지하기 좋기 때문에 사용자 경험에 좋습니다.</p>\n<p>그래서 보통은 저 대시 부분을 자동으로 넣어주기도 하죠.</p>\n<p>결국 우리가 사용자들에게 이렇게 휴대 전화 번호를 받으면 어플리케이션 내부 상태에는 이렇게 생긴 문자열이 저장되게 되겠죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token string\">'010-4755-6185'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>자 그리고 우리가 이 문자열을 보면 숫자인 부분과 숫자가 아닌 부분을 구분할 수 있죠? 이런 상황에서 우리가 이 휴대폰번호에서 숫자인 부분만 따로 뽑아내고 싶다면 어떻게 해야할까요?</p>\n<p>이런 상황일때 바로 d 캐릭터 클래스를 사용하게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token string\">'010-1111-1111'</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\d/g</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>자바스크립트의 String 객체가 가지고 있는 <code class=\"language-text\">match</code> 메소드는 인자로 받은 정규식과 매칭되는 문자들을 뽑아주는 기능을 가지고 있습니다. 이 예시에서는 글로벌을 의미하는  <code class=\"language-text\">g</code>플래그를 사용했기 때문에 문자열 전체에서 이 정규식과 매칭되는 모든 부분을 뽑아낸 건데요, 말 그대로 매칭되는 모든 부분을 뽑아내기 때문에 <code class=\"language-text\">match</code> 메소드는 매칭되는 문자열이 담긴 배열을 반환하게 됩니다.</p>\n<p>이제 이 배열을 <code class=\"language-text\">join</code> 메소드를 사용해서 합치면 원래의 휴대폰번호 정보에서 숫자 부분만 뽑아낸 문자열이 완성되겠죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token punctuation\">[</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token string\">'01011111111'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>사실 이 문제를 정규식을 사용해서 해결했기 때문에 굉장히 간단해보일 수 있지만, 사실 정규식 없이 해결하려고 하면 상당히 귀찮아집니다.</p>\n<p>뭐 예를 들어 이렇게 <code class=\"language-text\">for</code> 문을 사용해서 반복 작업을 해주거나</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">+=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>이렇게 명령형 프로그래밍이 별로면 문자열을 <code class=\"language-text\">split</code> 메소드를 사용해서 배열로 변경한 다음에 <code class=\"language-text\">reduce</code> 메소드를 사용해서 이렇게 풀어볼 수도 있겠죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\">s<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result<span class=\"token punctuation\">,</span> char</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n\t\t<span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> result <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>char<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>하지만 뭐가 되었든 간에 문자열을 순회하면서 이번에 내가 가져온 문자가 <code class=\"language-text\">Number</code> 형으로 형변환을 했을 때 <code class=\"language-text\">NaN</code>가 되는 게 아니라 제대로 형변환이 되었는지 확인하는 절차가 반드시 필요합니다.</p>\n<p>하지만 정규식으로 걸러낸다면</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token string\">'010-1111-1111'</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\d/g</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>그냥 이 한 줄이 끝이에요. 굉장히 간단하죠? 그래서 이런 문자열을 가지고 노는 문제를 풀 때는 정규식을 사용해서 문제를 해결하는 방법과 정규식을 사용하지 않고 문제를 해결하는 방법 사이에 큰 생산성 차이가 있어요.</p>\n<p>자, 여기서 조금 더 생산성을 향상시켜볼 수도 있습니다. 아까 저희가 해결하려고 했던 문제는 휴대폰번호 중에서 숫자인 부분만 걸러내는 것이었죠?</p>\n<p>이건 반대로 생각하면 숫자가 아닌 부분을 그냥 지워버리고 싶다는 것과 동일한 이야기잖아요.</p>\n<p>이때도 정규식을 사용하면 간단하게 문제를 해결할 수 있습니다. 바로 아까와 동일하게 d 캐릭터 클래스를 사용하면 돼요. 하지만 이번에는 소문자 d아닌 대문자 D를 사용할 겁니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token string\">'010-1111-1111'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\D/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token string\">'01011111111'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>이런 캐릭터 클래스들은 공통적으로 두 가지 의미를 가지고 있는데요, 하나는 이 캐릭터 클래스가 의미하는 문자의 집합인지, 그리고 다른 하나는 이 캐릭터 클래스가 의미하는 문자의 집합이 “아닌지”입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">\\d\n\\D</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>캐릭터 클래스를 소문자로 사용하면 이 캐릭터 클래스가 의미하는 문자의 집합인지를 의미하는 표현이 되는 것이고, 대문자로 사용하면 이 캐릭터 클래스가 의미하는 문자의 집합이 아닌지를 의미해요.</p>\n<p>즉, 대문자 D는 Digit 집합이 아닌 것, 다시 말하면 숫자가 아닌 것들을 의미합니다. 그래서 휴대폰번호에 <code class=\"language-text\">\\D</code> 캐릭터 클래스를 사용하면 숫자가 아닌 <code class=\"language-text\">-</code> (대시)들만 매칭이 되는 거죠.</p>\n<p>그리고 이렇게 매칭된 “숫자가 아닌 녀석들”을 <code class=\"language-text\">String</code> 객체의 <code class=\"language-text\">replace</code>메소드를 사용해서 빈 문자열로 치환해버리면, 우리가 처음에 하려고 했던 휴대폰 번호 중에서 숫자인 부분만 뽑아내고 싶다는 문제를 손 쉽게 해결할 수 있게 되는 것이죠.</p>\n<p>아까 우리가 처음에 숫자인 부분들만 뽑아내서 처리를 했을 때는 문자를 뽑아낸 이후에 다시 <code class=\"language-text\">join</code> 메소드를 사용해서 하나의 문자열로 만드는 과정이 필요했지만, 반대로 숫자가 아닌 부분들을 찾아내서 없애버린다면 이런 과정조차 필요가 없게 되죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token string\">'010-1111-1111'</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\d/g</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">'010-1111-1111'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\D/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>이 두 코드는 정확히 같은 문제를 해결하기 위한 코드이지만 이 문제를 어떻게 바라보고 효율적으로 해결할 수 있는지에 대한 사고의 차이를 보여주는 코드이기도 해요.</p>\n<p>“숫자인 부분을 뽑아낸 후 합칠 것이냐”, 혹은 “숫자가 아닌 부분을 지워버릴 것이냐”의 차이인거죠. 여러분이 정규식을 사용하다보면 이런 선택의 기로에 서는 순간들이 생각보다 많이 와요. </p>\n<p>물론 이 예제만 본다면 성능적으로도 사실 차이가 별로 없기도 하고, 가독성 면에서도 큰 차이가 없습니다. 하지만 여러분이 다루려고 하는 문자열이 거대하면 거대할수록 이런 자잘한 선택에서 점점 큰 차이가 발생하게 될 수도 있어요.</p>\n<p>자, 그럼 정리를 해보자면 우리는 지금까지 <code class=\"language-text\">\\d</code> 캐릭터 클래스가 어떤 역할을 하는 녀석인지, 그리고 캐릭터 클래스를 소문자와 대문자로 썼을 때 각각 어떻게 작동하는 지에 대한 내용을 알아보았습니다.</p>\n<p>다음 강의에서는 숫자가 아니라 조금 더 넓은 범위의 집합을 의미하는 <code class=\"language-text\">\\w</code> 캐릭터 클래스에 대해서 알아보도록 하겠습니다.</p>","tableOfContents":"","fields":{"slug":"lecture.regex-tutorial.section2.4","lecture":"regex-tutorial","category":"content"},"frontmatter":{"title":"숫자를 찾아내는 \\d 캐릭터 클래스"}}},"pageContext":{"slug":"lecture.regex-tutorial.section2.4","previous":{"fields":{"slug":"lecture.regex-tutorial.section2.5","path":"/lectures/regex-tutorial/section2/5/"}},"next":{"fields":{"slug":"lecture.regex-tutorial.section2.3","path":"/lectures/regex-tutorial/section2/3/"}}}}}