{"version":3,"sources":["webpack:///./src/containers/TagPage/index.tsx","webpack:///./src/templates/TagPageTemplate.tsx"],"names":["logger","generateLogger","handleCategoryClick","categoryName","click","useStyles","makeStyles","items","transition","textDecoration","transform","TagPage","data","location","pageContext","tag","totalCount","styles","allMarkdownRemark","edges","pageInfo","pathname","split","path","posts","useMemo","map","p","node","lang","useRecoilState","languageAtom","useEffect","view","Layout","title","Title","description","right","Box","Categories","onClickCategory","SEO","RowList","Grid","item","xs","key","frontmatter","className","to","fields","onClick","handlePostClick","post","Paginator","pageCount","currentPage","defaultUrl","pageQuery","TagTemplate","props"],"mappings":"8UAcMA,EAASC,YAAe,YACxBC,EAAsB,SAACC,GAC3BH,EAAOI,MAAM,iBAAkB,CAAED,kBAM7BE,EAAYC,YAAW,CAC3BC,MAAO,CACLC,WAAY,6BACZ,MAAO,CACLC,eAAgB,QAElB,UAAW,CACTC,UAAW,kBAkDFC,EAtCC,SAAC,GAAgE,IAA9DC,EAA8D,EAA9DA,KAAMC,EAAwD,EAAxDA,SAAwD,IAA9CC,YAAeC,EAA+B,EAA/BA,IAAKC,EAA0B,EAA1BA,WAC/CC,EAASZ,IADgE,EAI3EO,EADFM,kBAAqBC,EAHwD,EAGxDA,MAAOC,EAHiD,EAGjDA,SAHiD,EAKlDP,EAASQ,SAASC,MAAM,KAC/CC,EAAO,IANkE,KAMrE,IANqE,KAOzEC,EAAQC,mBAAQ,kBAAMN,EAAMO,KAAI,SAAAC,GAAC,OAAIA,EAAEC,UAAO,CAACT,IAC9CU,EAAQC,yBAAeC,KARiD,GAc/E,OAJAC,qBAAU,WACRhC,EAAOiC,SACN,IAGD,kBAACC,EAAA,EAAD,CACEC,MAAO,kBAACD,EAAA,EAAOE,MAAR,CAAcD,MAAOpB,EAAKsB,YAAW,KAAOrB,EAAP,WAC5CsB,MACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAgBC,gBAAiBvC,MAIrC,kBAACwC,EAAA,EAAD,CAAKP,MAAOpB,IACZ,kBAAC4B,EAAA,EAAD,KACGnB,EAAME,KAAI,SAAAC,GAAC,OACV,kBAACiB,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,IAAKpB,EAAEqB,YAAYb,MAAOc,UAAWhC,EAAOV,OAC7D,kBAAC,OAAD,CAAM2C,GAAIvB,EAAEwB,OAAO5B,KAAM6B,QAAS,kBAlDtB,SAAC7B,GACvBvB,EAAOI,MAAM,gBAAiB,CAAEmB,SAiDkB8B,CAAgB1B,EAAEwB,OAAO5B,QAC/D,kBAAC,IAAD,CAAe+B,KAAM3B,UAK7B,kBAAC4B,EAAA,EAAD,CAAWC,UAAWpC,EAASoC,UAAWC,YAAarC,EAASqC,YAAaC,WAAYnC,EAAMM,KAAMA,MChE9F8B,GAFEC,UAJK,SAACC,GACnB,OAAO,kBAAC,EAAYA,IAKG","file":"component---src-templates-tag-page-template-tsx-ea83ec8b2e4d2d17fe16.js","sourcesContent":["import React, { useMemo, useEffect } from 'react';\nimport Layout from 'components/Layout';\nimport SEO from 'components/SEO';\nimport CategoriesCard from 'components/Cards/Widgets/Categories';\nimport Paginator from 'components/Utils/Paginator';\nimport { generateLogger } from 'utils/loggers';\nimport { Box, makeStyles, Grid } from '@material-ui/core';\nimport { PostListPageQueryResult } from 'models/query';\nimport RowList from 'components/Lists/RowList';\nimport { Link } from 'gatsby';\nimport PostIntroCard from 'components/Cards/Posts';\nimport { useRecoilState } from 'recoil';\nimport { languageAtom } from 'atoms/language';\n\nconst logger = generateLogger('tag_page');\nconst handleCategoryClick = (categoryName: string) => {\n  logger.click('click_category', { categoryName });\n};\nconst handlePostClick = (path: string) => {\n  logger.click('click_posting', { path });\n};\n\nconst useStyles = makeStyles({\n  items: {\n    transition: 'transform 0.2s ease-in-out',\n    '& a': {\n      textDecoration: 'none',\n    },\n    '&:hover': {\n      transform: 'scale(1.01)',\n    },\n  },\n});\n\ninterface Props extends PostListPageQueryResult {\n  location: Location;\n  pageContext: {\n    tag: string;\n    totalCount: number;\n  };\n}\nconst TagPage = ({ data, location, pageContext: { tag, totalCount } }: Props) => {\n  const styles = useStyles();\n  const {\n    allMarkdownRemark: { edges, pageInfo },\n  } = data;\n  const [, tagPath, tagSlug] = location.pathname.split('/');\n  const path = `/${tagPath}/${tagSlug}`;\n  const posts = useMemo(() => edges.map(p => p.node), [edges]);\n  const [lang] = useRecoilState(languageAtom);\n\n  useEffect(() => {\n    logger.view();\n  }, []);\n\n  return (\n    <Layout\n      title={<Layout.Title title={tag} description={`총 ${totalCount}개의 포스팅`} />}\n      right={\n        <Box>\n          <CategoriesCard onClickCategory={handleCategoryClick} />\n        </Box>\n      }\n    >\n      <SEO title={tag} />\n      <RowList>\n        {posts.map(p => (\n          <Grid item xs={12} key={p.frontmatter.title} className={styles.items}>\n            <Link to={p.fields.path} onClick={() => handlePostClick(p.fields.path)}>\n              <PostIntroCard post={p} />\n            </Link>\n          </Grid>\n        ))}\n      </RowList>\n      <Paginator pageCount={pageInfo.pageCount} currentPage={pageInfo.currentPage} defaultUrl={path} lang={lang} />\n    </Layout>\n  );\n};\n\nexport default TagPage;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport TagPage from 'containers/TagPage';\n\nconst TagTemplate = (props: any) => {\n  return <TagPage {...props} />;\n};\n\nexport default TagTemplate;\n\nexport const pageQuery = graphql`\n  query TagQuery($skip: Int!, $limit: Int!, $tag: String!, $lang: String!) {\n    allMarkdownRemark(\n      skip: $skip\n      limit: $limit\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } }, fields: { lang: { eq: $lang } } }\n    ) {\n      edges {\n        node {\n          ...PostQueryFragment\n        }\n      }\n      pageInfo {\n        currentPage\n        pageCount\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}